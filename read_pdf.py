import os
import logging
import pdfplumber
from typing import List, Dict
import warnings
from PIL import Image
import numpy as np
import torch
import easyocr

# Import h√†m c·∫•u h√¨nh Gemini t·ª´ client
from gemini_client import configure_gemini

# --- SETUP ---
logging.getLogger("pdfplumber").setLevel(logging.ERROR)
warnings.filterwarnings("ignore", category=UserWarning)

# --- H√ÄM X·ª¨ L√ù V·ªöI GEMINI ---
def describe_slide(img: Image.Image, model) -> str:
    if not model:
        return "[L·ªói Gemini: Model ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh]"
    try:
        prompt = '''B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i li·ªáu, slide thuy·∫øt tr√¨nh, b√†i vi·∫øt b√°o c√°o.
Nhi·ªám v·ª• c·ªßa b·∫°n l√† xem h√¨nh ·∫£nh c·ªßa m·ªôt slide v√† chuy·ªÉn ƒë·ªïi n√≥ th√†nh m·ªôt vƒÉn b·∫£n Markdown chi ti·∫øt, c√≥ c·∫•u tr√∫c.
- Gi·ªØ l·∫°i c√°c ti√™u ƒë·ªÅ, ƒë·ªÅ m·ª•c.
- Chuy·ªÉn ƒë·ªïi c√°c danh s√°ch (bullet points) th√†nh danh s√°ch Markdown.
- Tr√≠ch xu·∫•t v√† t√°i t·∫°o l·∫°i c√°c b·∫£ng bi·ªÉu m·ªôt c√°ch ch√≠nh x√°c nh·∫•t c√≥ th·ªÉ ·ªü ƒë·ªãnh d·∫°ng Markdown table.
- Di·ªÖn gi·∫£i v√† t√≥m t·∫Øt n·ªôi dung ch√≠nh c·ªßa slide m·ªôt c√°ch m·∫°ch l·∫°c.
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ng√¥n ng·ªØ g·ªëc c·ªßa vƒÉn b·∫£n.'''
        response = model.generate_content([prompt, img])
        return response.text.strip()
    except Exception as e:
        print(f"      -> ‚ùå L·ªói khi g·ªçi Gemini Vision: {e}")
        return "[L·ªói Gemini: Kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh]"

# --- PH∆Ø∆†NG √ÅN D·ª∞ PH√íNG: OCR ---
_ocr_reader = None
def get_ocr_reader():
    global _ocr_reader
    if _ocr_reader is None:
        try:
            print("üîé Kh·ªüi t·∫°o tr√¨nh ƒë·ªçc OCR (ph∆∞∆°ng √°n d·ª± ph√≤ng)...")
            use_gpu = torch.cuda.is_available()
            print(f"   -> EasyOCR s·∫Ω s·ª≠ d·ª•ng {'GPU' if use_gpu else 'CPU'}.")
            _ocr_reader = easyocr.Reader(['vi', 'en'], gpu=use_gpu)
        except Exception as e:
            print(f"   -> L·ªói nghi√™m tr·ªçng khi kh·ªüi t·∫°o EasyOCR: {e}")
            return None
    return _ocr_reader

def ocr_on_page(page) -> str:
    reader = get_ocr_reader()
    if not reader:
        return "[L·ªói OCR: Kh√¥ng th·ªÉ kh·ªüi t·∫°o tr√¨nh ƒë·ªçc]"
    try:
        img = page.to_image(resolution=300).original
        results = reader.readtext(np.array(img))
        return "\n".join([text for _, text, _ in results])
    except Exception as e:
        return f"[L·ªói khi ƒëang ch·∫°y OCR tr√™n trang: {e}]"

# --- H√ÄM TR√çCH XU·∫§T CH√çNH (Logic k·∫øt h·ª£p) ---
def extract_pdf_pages(path: str) -> List[Dict]:
    print("‚ú® C·∫•u h√¨nh Gemini...")
    model = configure_gemini()
    if not model:
        print("   -> ‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫•u h√¨nh Gemini. S·∫Ω chuy·ªÉn sang ph∆∞∆°ng √°n d·ª± ph√≤ng.")

    pages = []
    with pdfplumber.open(path) as pdf:
        for i, page in enumerate(pdf.pages, 1):
            print(f"(ÔΩ°‚óï‚Äø‚óïÔΩ°) ƒêang ph√¢n t√≠ch trang {i}/{len(pdf.pages)}...")
            page_data = {"page_number": i, "text": "", "tables": [], "source": ""}

            if model:
                print("   -> Th·ª≠ ph∆∞∆°ng √°n 1: Ph√¢n t√≠ch b·∫±ng Gemini Vision...")
                img = page.to_image(resolution=300).original
                gemini_description = describe_slide(img, model)
            else:
                gemini_description = "[L·ªói Gemini: Model kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh]"

            if "[L·ªói Gemini" in gemini_description:
                print("   -> (‚ï•_‚ï•)  Gemini kh√¥ng kh·∫£ d·ª•ng, chuy·ªÉn sang ph∆∞∆°ng √°n 2: Ph√¢n t√≠ch th·ªß c√¥ng...")
                page_data["source"] = "manual"
                text = page.extract_text(layout=True) or ""
                tables = page.extract_tables() or []
                
                if len(text.strip()) < 100 and not tables:
                    print(f"      -> Trang {i} c√≥ √≠t vƒÉn b·∫£n, ƒëang ch·∫°y OCR...")
                    page_data["text"] = ocr_on_page(page)
                    page_data["source"] = "ocr"
                else:
                    page_data["text"] = text
                    page_data["tables"] = tables
            else:
                print("      -> (*‚âßœâ‚â¶*) Gemini ph√¢n t√≠ch th√†nh c√¥ng!")
                page_data["source"] = "gemini"
                page_data["text"] = gemini_description

            pages.append(page_data)
    return pages

# --- MAIN SCRIPT EXECUTION ---
def main():
    from config import PDF_PATH
    if not os.path.exists(PDF_PATH):
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file PDF t·∫°i ƒë∆∞·ªùng d·∫´n trong config.py: `{PDF_PATH}`")
        return
    
    try:
        print(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file: {PDF_PATH}...")
        extracted_pages = extract_pdf_pages(PDF_PATH)
        print(f"\n‚úÖ Ho√†n th√†nh! Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(extracted_pages)} trang.\n")
        
        if extracted_pages:
            p1 = extracted_pages[0]
            print("--- PREVIEW TRANG 1 ---")
            print(f"Ngu·ªìn: {p1['source']}")
            print(f"N·ªôi dung: {p1['text'][:500]}...")
            if p1['tables']:
                print(f"T√¨m th·∫•y {len(p1['tables'])} b·∫£ng.")
            
    except Exception as e:
        print(f"\nƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")

if __name__ == "__main__":
    main()