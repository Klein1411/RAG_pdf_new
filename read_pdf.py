import os
import logging
import argparse
import pdfplumber
from typing import List, Dict
import warnings
from PIL import Image
import numpy as np
import torch
import easyocr

# Import h√†m x·ª≠ l√Ω Gemini t·ª´ file client m·ªõi
from gemini_client import describe_slide

# --- SETUP ---
# T·∫Øt b·ªõt warning kh√¥ng c·∫ßn thi·∫øt
logging.getLogger("pdfplumber").setLevel(logging.ERROR)
warnings.filterwarnings("ignore", category=UserWarning)

# --- PH∆Ø∆†NG √ÅN D·ª∞ PH√íNG: OCR ---

# Kh·ªüi t·∫°o EasyOCR m·ªôt c√°ch "l∆∞·ªùi bi·∫øng" (ch·ªâ khi n√†o c·∫ßn m·ªõi ch·∫°y)
_ocr_reader = None
def get_ocr_reader():
    """Kh·ªüi t·∫°o v√† tr·∫£ v·ªÅ m·ªôt th·ª±c th·ªÉ c·ªßa EasyOCR reader."""
    global _ocr_reader
    if _ocr_reader is None:
        try:
            print("üîé Kh·ªüi t·∫°o tr√¨nh ƒë·ªçc OCR (ph∆∞∆°ng √°n d·ª± ph√≤ng)...")
            use_gpu = torch.cuda.is_available()
            print(f"   -> EasyOCR s·∫Ω s·ª≠ d·ª•ng {'GPU' if use_gpu else 'CPU'}.")
            _ocr_reader = easyocr.Reader(['vi', 'en'], gpu=use_gpu)
        except Exception as e:
            print(f"   -> L·ªói nghi√™m tr·ªçng khi kh·ªüi t·∫°o EasyOCR: {e}")
            return None
    return _ocr_reader

def ocr_on_page(page) -> str:
    """Ch·∫°y OCR tr√™n m·ªôt trang v√† tr·∫£ v·ªÅ vƒÉn b·∫£n."""
    reader = get_ocr_reader()
    if not reader:
        return "[L·ªói OCR: Kh√¥ng th·ªÉ kh·ªüi t·∫°o tr√¨nh ƒë·ªçc]"
    try:
        img = page.to_image(resolution=300).original
        results = reader.readtext(np.array(img))
        texts = [text for _, text, _ in results]
        return "\n".join(texts)
    except Exception as e:
        return f"[L·ªói khi ƒëang ch·∫°y OCR tr√™n trang: {e}]"


# --- H√ÄM TR√çCH XU·∫§T CH√çNH (Logic k·∫øt h·ª£p) ---
def extract_pdf_pages(path: str) -> List[Dict]:
    pages = []
    with pdfplumber.open(path) as pdf:
        for i, page in enumerate(pdf.pages, 1):
            print(f"üìÑ ƒêang ph√¢n t√≠ch trang {i}/{len(pdf.pages)}...")
            
            # --- ∆Øu ti√™n 1: Th·ª≠ ph√¢n t√≠ch b·∫±ng Gemini Vision ---
            print("   -> Th·ª≠ ph∆∞∆°ng √°n 1: Ph√¢n t√≠ch b·∫±ng Gemini Vision...")
            img = page.to_image(resolution=300).original
            gemini_description = describe_slide(img)

            # --- Ki·ªÉm tra v√† chuy·ªÉn sang ph∆∞∆°ng √°n 2 n·∫øu c·∫ßn ---
            if "[T·∫•t c·∫£ c√°c API key ƒë·ªÅu g·∫∑p l·ªói" in gemini_description:
                print("   -> ‚ö†Ô∏è Gemini kh√¥ng kh·∫£ d·ª•ng, chuy·ªÉn sang ph∆∞∆°ng √°n 2: Ph√¢n t√≠ch th·ªß c√¥ng...")
                
                # D√πng pdfplumber ƒë·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n
                text = page.extract_text(layout=True) or ""
                
                # N·∫øu vƒÉn b·∫£n qu√° √≠t, coi ƒë√≥ l√† ·∫£nh v√† ch·∫°y OCR
                if len(text.strip()) < 100:
                    print(f"      -> Trang {i} c√≥ √≠t vƒÉn b·∫£n, ƒëang ch·∫°y OCR...")
                    final_text = ocr_on_page(page)
                else:
                    final_text = text
            else:
                # N·∫øu Gemini ho·∫°t ƒë·ªông, s·ª≠ d·ª•ng m√¥ t·∫£ c·ªßa n√≥
                final_text = gemini_description

            pages.append({
                "page_number": i,
                "text": final_text,
            })
    return pages

# --- MAIN SCRIPT EXECUTION ---
def main():
    parser = argparse.ArgumentParser(description="Tr√≠ch xu·∫•t n·ªôi dung t·ª´ file PDF b·∫±ng Gemini Vision v·ªõi ph∆∞∆°ng √°n d·ª± ph√≤ng th·ªß c√¥ng.")
    parser.add_argument("pdf_path", help="ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF c·∫ßn x·ª≠ l√Ω.")
    args = parser.parse_args()
    pdf_path = args.pdf_path
    if not os.path.exists(pdf_path):
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file `{pdf_path}`")
        return
    try:
        print(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file: {pdf_path}...")
        extracted_pages = extract_pdf_pages(pdf_path)
        print(f"‚úÖ Ho√†n th√†nh! Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(extracted_pages)} trang.\n")
        if extracted_pages:
            p1 = extracted_pages[0]
            print("--- PREVIEW TRANG 1 ---")
            print(f"{p1['text'][:1000]}...")
    except Exception as e:
        print(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")

if __name__ == "__main__":
    main()