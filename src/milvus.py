import os
from dotenv import load_dotenv
from pymilvus import (
    connections,
    utility,
    FieldSchema,
    CollectionSchema,
    DataType,
    Collection
)
from src.logging_config import get_logger

logger = get_logger(__name__)

# 1. T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
MILVUS_HOST = os.getenv("MILVUS_HOST", "localhost")
MILVUS_PORT = os.getenv("MILVUS_PORT", "19530")
DEFAULT_ALIAS = "default"

# --- C√ÅC H√ÄM ƒê·ªÇ T∆Ø∆†NG T√ÅC V·ªöI MILVUS ---

def connect_to_milvus():
    """
    K·∫øt n·ªëi ƒë·∫øn server Milvus.
    H√†m n√†y an to√†n ƒë·ªÉ g·ªçi nhi·ªÅu l·∫ßn.
    """
    try:
        # Ki·ªÉm tra xem ƒë√£ c√≥ k·∫øt n·ªëi v·ªõi alias n√†y ch∆∞a
        if not connections.has_connection(DEFAULT_ALIAS):
            logger.info(f"K·∫øt n·ªëi ƒë·∫øn Milvus t·∫°i {MILVUS_HOST}:{MILVUS_PORT}")
            print(f"üîå ƒêang k·∫øt n·ªëi ƒë·∫øn Milvus t·∫°i {MILVUS_HOST}:{MILVUS_PORT}...")
            connections.connect(
                alias=DEFAULT_ALIAS,
                host=MILVUS_HOST,
                port=MILVUS_PORT
            )
            logger.info("K·∫øt n·ªëi Milvus th√†nh c√¥ng")
            print("‚úÖ K·∫øt n·ªëi Milvus th√†nh c√¥ng!")
        else:
            logger.debug("ƒê√£ c√≥ k·∫øt n·ªëi Milvus s·∫µn")
    except Exception as e:
        logger.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Milvus: {e}")
        print(f"‚ùå L·ªói kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Milvus: {e}")
        raise

def get_or_create_collection(collection_name: str, dim: int = 768, recreate: bool = True) -> Collection:
    """
    L·∫•y ho·∫∑c t·∫°o m·ªõi m·ªôt collection trong Milvus.

    Args:
        collection_name (str): T√™n c·ªßa collection.
        dim (int): S·ªë chi·ªÅu c·ªßa vector embedding.
        recreate (bool): N·∫øu True, s·∫Ω x√≥a collection c≈© n·∫øu t·ªìn t·∫°i v√† t·∫°o l·∫°i.

    Returns:
        Collection: ƒê·ªëi t∆∞·ª£ng collection c·ªßa Pymilvus.
    """
    connect_to_milvus() # ƒê·∫£m b·∫£o ƒë√£ k·∫øt n·ªëi

    # N·∫øu y√™u c·∫ßu t·∫°o l·∫°i, s·∫Ω x√≥a collection c≈©
    if recreate and utility.has_collection(collection_name, using=DEFAULT_ALIAS):
        logger.info(f"Y√™u c·∫ßu t·∫°o l·∫°i, x√≥a collection '{collection_name}'")
        print(f"üóëÔ∏è Y√™u c·∫ßu t·∫°o l·∫°i, ƒëang x√≥a collection '{collection_name}'...")
        utility.drop_collection(collection_name, using=DEFAULT_ALIAS)
        logger.info(f"ƒê√£ x√≥a collection '{collection_name}'")
        print(f"   -> ƒê√£ x√≥a collection '{collection_name}'.")

    # Ki·ªÉm tra l·∫°i s·ª± t·ªìn t·∫°i c·ªßa collection
    if utility.has_collection(collection_name, using=DEFAULT_ALIAS):
        logger.info(f"Collection '{collection_name}' ƒë√£ t·ªìn t·∫°i, ƒëang t·∫£i")
        print(f"‚úîÔ∏è Collection '{collection_name}' ƒë√£ t·ªìn t·∫°i. ƒêang t·∫£i...")
        return Collection(collection_name, using=DEFAULT_ALIAS)
    
    # --- N·∫øu collection ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi ---
    logger.info(f"Collection '{collection_name}' ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi")
    print(f"üÜï Collection '{collection_name}' ch∆∞a t·ªìn t·∫°i. ƒêang t·∫°o m·ªõi...")
    
    # ƒê·ªãnh nghƒ©a schema
    fields = [
        FieldSchema(name="id", dtype=DataType.INT64, is_primary=True, auto_id=True),
        FieldSchema(name="embedding", dtype=DataType.FLOAT_VECTOR, dim=dim),
        FieldSchema(name="text", dtype=DataType.VARCHAR, max_length=65535, description="N·ªôi dung c·ªßa ƒëo·∫°n vƒÉn b·∫£n"),
        FieldSchema(name="pdf_source", dtype=DataType.VARCHAR, max_length=1024, description="T√™n file PDF ngu·ªìn"),
        FieldSchema(name="page", dtype=DataType.INT64, description="S·ªë trang trong file PDF")
    ]
    schema = CollectionSchema(fields, description=f"Embeddings for {collection_name}")

    # T·∫°o collection
    collection = Collection(
        name=collection_name,
        schema=schema,
        using=DEFAULT_ALIAS,
        consistency_level="Strong" # ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c nh·∫•t qu√°n
    )
    
    logger.info(f"ƒê√£ t·∫°o collection '{collection_name}' th√†nh c√¥ng")
    print(f"   -> ‚úÖ ƒê√£ t·∫°o collection '{collection_name}' th√†nh c√¥ng.")
    
    logger.info("T·∫°o index cho collection")
    print("   -> ƒêang t·∫°o index cho collection...")
    index_params = {
        "metric_type": "L2",
        "index_type": "IVF_FLAT",
        "params": {"nlist": 1024}
    }
    collection.create_index(field_name="embedding", index_params=index_params)
    logger.info("Index ƒë√£ ƒë∆∞·ª£c t·∫°o")
    print("      -> ‚úÖ Index ƒë√£ ƒë∆∞·ª£c t·∫°o.")

    return collection

# --- KH·ªêI ƒê·ªÇ CH·∫†Y TH·ª¨ NGHI·ªÜM ---
if __name__ == "__main__":
    COLLECTION_NAME = "pdf_vectors_test"
    
    logger.info("=== B·∫ÆT ƒê·∫¶U KI·ªÇM TRA MODULE MILVUS ===")
    print("--- B·∫ÆT ƒê·∫¶U KI·ªÇM TRA MODULE MILVUS ---")
    
    # 1. K·∫øt n·ªëi
    connect_to_milvus()
    
    # 2. L·∫•y ho·∫∑c t·∫°o collection (v·ªõi t√πy ch·ªçn x√≥a v√† t·∫°o l·∫°i)
    # ƒê·∫∑t recreate=True ƒë·ªÉ ƒë·∫£m b·∫£o collection lu√¥n m·ªõi khi ch·∫°y file n√†y
    collection = get_or_create_collection(COLLECTION_NAME, recreate=True)
    
    # 3. In th√¥ng tin
    logger.info(f"Th√¥ng tin collection: {collection.name}, {collection.num_entities} entities")
    print("\n--- TH√îNG TIN COLLECTION ---")
    print(f"T√™n: {collection.name}")
    print(f"Schema: {collection.schema}")
    print(f"S·ªë l∆∞·ª£ng th·ª±c th·ªÉ: {collection.num_entities}")
    
    # 4. X√≥a collection test ƒë·ªÉ d·ªçn d·∫πp
    logger.info("D·ªçn d·∫πp collection test")
    print(f"\n--- D·ªåN D·∫∏P ---")
    utility.drop_collection(COLLECTION_NAME, using=DEFAULT_ALIAS)
    logger.info(f"ƒê√£ x√≥a collection test '{COLLECTION_NAME}'")
    print(f"üóëÔ∏è ƒê√£ x√≥a collection test '{COLLECTION_NAME}'.")
    
    logger.info("=== KI·ªÇM TRA HO√ÄN T·∫§T ===")
    print("\n--- KI·ªÇM TRA HO√ÄN T·∫§T ---")