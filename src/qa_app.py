# qa_app.py

import sys
from pathlib import Path
import torch
from sentence_transformers import SentenceTransformer
import os

# Th√™m th∆∞ m·ª•c g·ªëc project v√†o sys.path ƒë·ªÉ import src module
project_root = Path(__file__).parent.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

# --- 1. C·∫§U H√åNH & IMPORT ---
from src.config import EMBEDDING_MODEL_NAME, COLLECTION_NAME
from src.milvus import get_or_create_collection
# Import c√°c h√†m x·ª≠ l√Ω LLM t·ª´ file m·ªõi
from src.llm_handler import initialize_and_select_llm, generate_answer_with_fallback
from src.logging_config import get_logger

logger = get_logger(__name__)

# --- 2. C√ÅC H√ÄM TI·ªÜN √çCH ---

def get_embedding_model():
    """
    Kh·ªüi t·∫°o v√† tr·∫£ v·ªÅ model embedding, ∆∞u ti√™n s·ª≠ d·ª•ng GPU n·∫øu c√≥.
    """
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    logger.info(f"ü§ñ ƒêang t·∫£i model embedding '{EMBEDDING_MODEL_NAME}' l√™n '{device}'...")
    try:
        model = SentenceTransformer(EMBEDDING_MODEL_NAME, device=device)
        logger.info("‚úÖ Model embedding ƒë√£ t·∫£i th√†nh c√¥ng!")
        return model
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi t·∫£i model embedding: {e}")
        return None

def search_in_milvus(collection, query_vector, top_k=30):
    """
    T√¨m ki·∫øm c√°c vector t∆∞∆°ng t·ª± trong Milvus. 
    H√†m n√†y gi·∫£ ƒë·ªãnh collection ƒë√£ ƒë∆∞·ª£c load s·∫µn.
    """
    logger.info(f"üîç ƒêang t√¨m ki·∫øm {top_k} k·∫øt qu·∫£ li√™n quan trong Milvus...")
    try:
        search_params = {"metric_type": "L2", "params": {"nprobe": 64}}
        results = collection.search(
            data=[query_vector],
            anns_field="embedding",
            param=search_params,
            limit=top_k,
            output_fields=["text", "page", "pdf_source"]
        )
        logger.info("‚úÖ T√¨m ki·∫øm ho√†n t·∫•t")
        return results
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi t√¨m ki·∫øm tr√™n Milvus: {e}")
        return None

# --- 3. H√ÄM MAIN CH√çNH ---

def main():
    """
    H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng H·ªèi-ƒê√°p.
    """
    logger.info("=== Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng H·ªéI-ƒê√ÅP RAG ===")
    print("--- CH√ÄO M·ª™NG ƒê·∫æN V·ªöI ·ª®NG D·ª§NG H·ªéI-ƒê√ÅP RAG Ôºà*Ôºæ3Ôºæ)/~‚òÜ---")
    
    # --- B∆∞·ªõc 1: Kh·ªüi t·∫°o v√† l·ª±a ch·ªçn LLM ---
    # To√†n b·ªô logic ph·ª©c t·∫°p ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang llm_handler.py
    model_choice, gemini_model, ollama_model_name = initialize_and_select_llm()

    # --- B∆∞·ªõc 2: Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn kh√°c ---
    embedding_model = get_embedding_model()
    if not embedding_model:
        logger.error("·ª®ng d·ª•ng kh√¥ng th·ªÉ kh·ªüi ƒë·ªông do l·ªói model embedding")
        print("\n--- ·ª®ng d·ª•ng kh√¥ng th·ªÉ kh·ªüi ƒë·ªông do l·ªói model embedding. ---")
        return

    logger.info(f"K·∫øt n·ªëi t·ªõi Milvus collection '{COLLECTION_NAME}'")
    print("\n--- B∆∞·ªõc 3: K·∫øt n·ªëi t·ªõi Milvus collection ---")
    collection = get_or_create_collection(COLLECTION_NAME, recreate=False)
    if not collection:
        logger.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi collection")
        print("   -> (T_T) Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi collection. ƒê√£ ch·∫°y file populate_milvus.py ch∆∞a?")
        return

    if not collection.has_index() or collection.num_entities == 0:
        logger.warning("Collection ƒëang tr·ªëng ho·∫∑c ch∆∞a ƒë∆∞·ª£c ƒë√°nh ch·ªâ m·ª•c")
        print("   -> ‚ö†Ô∏è Collection hi·ªán ƒëang tr·ªëng ho·∫∑c ch∆∞a ƒë∆∞·ª£c ƒë√°nh ch·ªâ m·ª•c.")
        run_populate = input("   -> B·∫°n c√≥ mu·ªën ch·∫°y script ƒë·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu? (y/n): ").strip()
        if run_populate.lower() == 'y':
            logger.info("B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª´ populate_database")
            from src.populate_milvus import populate_database
            populate_database()
            logger.info("T·∫£i l·∫°i collection sau khi ƒë·ªìng b·ªô")
            print("\n   -> ƒêang t·∫£i l·∫°i collection sau khi ƒë·ªìng b·ªô...")
            collection = get_or_create_collection(COLLECTION_NAME, recreate=False)
        else:
            logger.error("Ng∆∞·ªùi d√πng b·ªè qua ƒë·ªìng b·ªô, ·ª©ng d·ª•ng kh√¥ng th·ªÉ ti·∫øp t·ª•c")
            print("   -> B·ªè qua b∆∞·ªõc ƒë·ªìng b·ªô. ·ª®ng d·ª•ng kh√¥ng th·ªÉ ti·∫øp t·ª•c n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu.")
            return

    logger.info(f"T·∫£i collection '{COLLECTION_NAME}' v√†o b·ªô nh·ªõ")
    print(f"\n--- B∆∞·ªõc 4: T·∫£i collection '{COLLECTION_NAME}' v√†o b·ªô nh·ªõ ---")
    collection.load()
    logger.info(f"Collection ƒë√£ s·∫µn s√†ng v·ªõi {collection.num_entities} th·ª±c th·ªÉ")
    print(f"   -> (¬∞o¬∞) Collection ƒë√£ s·∫µn s√†ng! Hi·ªán c√≥ {collection.num_entities} th·ª±c th·ªÉ.")

    # --- V√≤ng l·∫∑p h·ªèi-ƒë√°p ---
    logger.info("B·∫Øt ƒë·∫ßu phi√™n h·ªèi-ƒë√°p")
    print("\n--- B·∫Øt ƒë·∫ßu phi√™n h·ªèi-ƒë√°p (g√µ 'exit' ƒë·ªÉ tho√°t :3) ---")
    try:
        while True:
            query = input("\n‚ùì ƒê·∫∑t c√¢u h·ªèi c·ªßa b·∫°n: ")
            if query.lower() == 'exit':
                logger.info("Ng∆∞·ªùi d√πng k·∫øt th√∫c phi√™n h·ªèi-ƒë√°p")
                break
                
            logger.info(f"X·ª≠ l√Ω c√¢u h·ªèi: {query[:50]}...")
            print(f"üß† ƒêang t·∫°o embedding cho c√¢u h·ªèi...")
            query_embedding = embedding_model.encode(query)

            search_results = search_in_milvus(collection, query_embedding, top_k=15)

            if not search_results or not search_results[0]:
                logger.warning("Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong t√†i li·ªáu")
                print("   -> ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong t√†i li·ªáu.")
                continue

            # --- LOGIC M·ªöI: M·ªû R·ªòNG NG·ªÆ C·∫¢NH ---
            logger.info(f"T√¨m th·∫•y {len(search_results[0])} ƒëo·∫°n li√™n quan, b·∫Øt ƒë·∫ßu m·ªü r·ªông ng·ªØ c·∫£nh")
            print("üéØ ƒê√£ t√¨m th·∫•y c√°c ƒëo·∫°n li√™n quan, ƒëang m·ªü r·ªông ng·ªØ c·∫£nh...")
            
            # 1. L·∫•y s·ªë trang t·ª´ k·∫øt qu·∫£ ban ƒë·∫ßu
            hit_pages = sorted(list(set([hit.entity.get('page') for hit in search_results[0]]))) 
            logger.debug(f"C√°c trang li√™n quan ban ƒë·∫ßu: {hit_pages}")
            print(f"   -> C√°c trang li√™n quan ban ƒë·∫ßu: {hit_pages}")

            # 2. X√°c ƒë·ªãnh v√πng trang ƒë·ªÉ l·∫•y th√™m ng·ªØ c·∫£nh
            context_pages = []
            if hit_pages:
                min_page = min(hit_pages)
                max_page = max(hit_pages)
                # L·∫•y th√™m 1 trang tr∆∞·ªõc v√† 2 trang sau ƒë·ªÉ c√≥ ng·ªØ c·∫£nh r·ªông h∆°n
                context_min_page = max(1, min_page - 1)
                context_max_page = max_page + 2
                context_pages = list(range(context_min_page, context_max_page + 1))
                logger.info(f"M·ªü r·ªông ng·ªØ c·∫£nh t·ª´ trang {context_min_page} ƒë·∫øn {context_max_page}")
                print(f"   -> M·ªü r·ªông ng·ªØ c·∫£nh ra c√°c trang t·ª´ {context_min_page} ƒë·∫øn {context_max_page}.")

            # 3. L·∫•y t·∫•t c·∫£ c√°c chunk t·ª´ v√πng trang ƒë√£ m·ªü r·ªông
            expanded_results = []
            if context_pages:
                expr = f"page in {context_pages}"
                try:
                    expanded_results = collection.query(expr=expr, output_fields=["text", "page"])
                    logger.info(f"L·∫•y ƒë∆∞·ª£c {len(expanded_results)} chunk t·ª´ v√πng m·ªü r·ªông")
                except Exception as e:
                    logger.error(f"L·ªói khi m·ªü r·ªông ng·ªØ c·∫£nh t·ª´ Milvus: {e}")
                    print(f"   -> ‚ùå L·ªói khi m·ªü r·ªông ng·ªØ c·∫£nh t·ª´ Milvus: {e}")

            # 4. X√¢y d·ª±ng ng·ªØ c·∫£nh cu·ªëi c√πng t·ª´ k·∫øt qu·∫£ m·ªü r·ªông
            logger.info("X√¢y d·ª±ng prompt v·ªõi ng·ªØ c·∫£nh ƒë·∫ßy ƒë·ªß")
            print("üìù ƒêang x√¢y d·ª±ng l·∫°i prompt v·ªõi ng·ªØ c·∫£nh ƒë·∫ßy ƒë·ªß h∆°n...")
            context_map = {} 
            for hit in expanded_results:
                page_num = hit.get('page')
                text = hit.get('text')
                if page_num not in context_map:
                    context_map[page_num] = []
                context_map[page_num].append(text)

            # Gh√©p c√°c chunk trong c√πng m·ªôt trang v√† sau ƒë√≥ gh√©p c√°c trang l·∫°i
            final_context = ""
            sorted_pages = sorted(context_map.keys())
            for page_num in sorted_pages:
                final_context += f"--- N·ªôi dung t·ª´ Trang {page_num} ---\n"
                final_context += "\n".join(context_map[page_num]) + "\n\n"
            
            # N·∫øu kh√¥ng c√≥ ng·ªØ c·∫£nh m·ªü r·ªông, quay v·ªÅ d√πng ng·ªØ c·∫£nh ban ƒë·∫ßu
            if not final_context:
                logger.warning("Kh√¥ng th·ªÉ m·ªü r·ªông ng·ªØ c·∫£nh, s·ª≠ d·ª•ng ng·ªØ c·∫£nh g·ªëc")
                print("   -> ‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü r·ªông ng·ªØ c·∫£nh, quay v·ªÅ d√πng ng·ªØ c·∫£nh g·ªëc.")
                final_context = "\n".join([hit.entity.get('text') for hit in search_results[0]])

            unique_sources = sorted(list(set([f"{search_results[0][0].entity.get('pdf_source')} (Trang {p})" for p in sorted_pages])))
            # ------------------------------------------

            prompt = f'''D·ª±a v√†o c√°c th√¥ng tin ƒë∆∞·ª£c cung c·∫•p d∆∞·ªõi ƒë√¢y t·ª´ m·ªôt t√†i li·ªáu PDF:\n\n{final_context}\n\nH√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch chi ti·∫øt v√† ch√≠nh x√°c. Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin ƒë∆∞·ª£c cung c·∫•p, kh√¥ng b·ªãa ƒë·∫∑t. N·∫øu th√¥ng tin kh√¥ng ƒë·ªß ƒë·ªÉ tr·∫£ l·ªùi, h√£y n√≥i r·∫±ng "Th√¥ng tin kh√¥ng c√≥ trong t√†i li·ªáu".\n\nC√¢u h·ªèi: {query}\n'''
            
            # --- G·ªçi model v·ªõi logic retry v√† fallback ---
            logger.info("G·ªçi LLM ƒë·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi")
            answer = generate_answer_with_fallback(prompt, model_choice, gemini_model, ollama_model_name)
            logger.info("ƒê√£ nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi t·ª´ LLM")

            print("\n‚úÖ C√¢u tr·∫£ l·ªùi:")
            print(answer)
            
            if not "[L·ªñI H·ªÜ TH·ªêNG]" in answer and unique_sources:
                print(f"\nNgu·ªìn tham kh·∫£o: {', '.join(unique_sources)}")
    finally:
        # ƒê·∫£m b·∫£o collection ƒë∆∞·ª£c gi·∫£i ph√≥ng khi k·∫øt th√∫c
        logger.info(f"Gi·∫£i ph√≥ng collection '{COLLECTION_NAME}' kh·ªèi b·ªô nh·ªõ")
        print(f"\n--- Gi·∫£i ph√≥ng collection '{COLLECTION_NAME}' kh·ªèi b·ªô nh·ªõ ---")
        collection.release()

    logger.info("K·∫øt th√∫c ·ª©ng d·ª•ng QA")
    print("\n--- C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng! ---")


if __name__ == "__main__":
    main()