import os
import sys
from pathlib import Path
import logging
import pdfplumber
from typing import List, Dict
import warnings
from PIL import Image
import numpy as np
import torch
import easyocr
import fitz  # pymupdf
import pytesseract
import io

# Th√™m th∆∞ m·ª•c g·ªëc project v√†o sys.path ƒë·ªÉ import src module
project_root = Path(__file__).parent.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

from src.logging_config import get_logger
from src.clean_pdf import clean_extracted_text, clean_table_text

# --- SETUP ---
logger = get_logger(__name__)
logging.getLogger("pdfplumber").setLevel(logging.ERROR)
warnings.filterwarnings("ignore", category=UserWarning)

# --- Removed Gemini Vision functions - using manual extraction only ---

# --- PH∆Ø∆†NG √ÅN D·ª∞ PH√íNG: OCR ---
_ocr_reader = None
def get_ocr_reader():
    global _ocr_reader
    if _ocr_reader is None:
        try:
            logger.info("üîé Kh·ªüi t·∫°o tr√¨nh ƒë·ªçc OCR (ph∆∞∆°ng √°n d·ª± ph√≤ng)...")
            use_gpu = torch.cuda.is_available()
            logger.info(f"EasyOCR s·∫Ω s·ª≠ d·ª•ng {'GPU' if use_gpu else 'CPU'}")
            _ocr_reader = easyocr.Reader(['vi', 'en'], gpu=use_gpu)
        except Exception as e:
            logger.error(f"L·ªói nghi√™m tr·ªçng khi kh·ªüi t·∫°o EasyOCR: {e}")
            return None
    return _ocr_reader

def ocr_on_page(page) -> str:
    reader = get_ocr_reader()
    if not reader:
        return "[L·ªói OCR: Kh√¥ng th·ªÉ kh·ªüi t·∫°o tr√¨nh ƒë·ªçc]"
    try:
        img = page.to_image(resolution=300).original
        results = reader.readtext(np.array(img))
        return "\n".join([text for _, text, _ in results])
    except Exception as e:
        return f"[L·ªói khi ƒëang ch·∫°y OCR tr√™n trang: {e}]"

# Gemini OCR functions removed - using EasyOCR/Tesseract only


# Tesseract OCR function for image-based PDFs
def tesseract_ocr_on_page(page_image: Image.Image) -> str:
    """
    S·ª≠ d·ª•ng Tesseract OCR ƒë·ªÉ ƒë·ªçc text t·ª´ m·ªôt trang PDF (d·∫°ng ·∫£nh).
    
    Args:
        page_image: PIL Image c·ªßa trang PDF
        
    Returns:
        Text ƒë√£ OCR
    """
    try:
        logger.debug("üîç ƒêang OCR trang b·∫±ng Tesseract...")
        text = pytesseract.image_to_string(page_image, lang='eng')
        return text
    except Exception as e:
        logger.error(f"‚ùå L·ªói Tesseract OCR: {e}")
        return "[L·ªói Tesseract: Kh√¥ng th·ªÉ OCR trang]"


# Gemini OCR functions removed - using standard OCR methods only

def extract_pdf_with_tesseract(pdf_path: str) -> List[Dict]:
    """
    Extract to√†n b·ªô PDF b·∫±ng pymupdf + Tesseract OCR.
    D√πng cho image-based PDF c√≥ nhi·ªÅu ·∫£nh (>= 20 ·∫£nh).
    
    Args:
        pdf_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF
        
    Returns:
        List c√°c trang v·ªõi text ƒë√£ OCR
    """
    logger.info("üîÑ Chuy·ªÉn sang ph∆∞∆°ng √°n Tesseract OCR (pymupdf + Tesseract)")
    
    try:
        doc = fitz.open(pdf_path)
        total_pages = len(doc)
        logger.info(f"üìÑ PDF c√≥ {total_pages} trang, ƒëang OCR...")
        
        pages = []
        
        for page_num in range(total_pages):
            logger.info(f"   OCR trang {page_num + 1}/{total_pages}...")
            
            page = doc[page_num]
            
            # Convert page to image (300 DPI cho OCR t·ªët)
            pix = page.get_pixmap(dpi=300)
            img_bytes = pix.tobytes("png")
            image = Image.open(io.BytesIO(img_bytes))
            
            # OCR
            text = tesseract_ocr_on_page(image)
            
            # Clean text
            text = clean_extracted_text(text)
            
            # T·∫°o page data
            page_data = {
                "page_number": page_num + 1,
                "text": text,
                "tables": [],  # Tesseract kh√¥ng extract table
                "source": "tesseract-ocr"
            }
            
            pages.append(page_data)
        
        doc.close()
        
        logger.info(f"‚úÖ Ho√†n th√†nh OCR {total_pages} trang b·∫±ng Tesseract")
        return pages
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi OCR b·∫±ng Tesseract: {e}")
        return []

# --- H√ÄM TR√çCH XU·∫§T CH√çNH (Ch·ªâ d√πng ph∆∞∆°ng √°n th·ªß c√¥ng/OCR) ---
def extract_pdf_pages(path: str) -> List[Dict]:
    logger.info("üìÑ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch PDF b·∫±ng pdfplumber + OCR...")
    pages = []
    
    # Th·ª≠ m·ªü b·∫±ng pdfplumber tr∆∞·ªõc
    try:
        pdf = pdfplumber.open(path)
        has_pages = pdf.pages and len(pdf.pages) > 0
    except Exception as e:
        logger.error(f"‚ùå Kh√¥ng th·ªÉ m·ªü PDF b·∫±ng pdfplumber: {e}")
        has_pages = False
        pdf = None
    
    # Ki·ªÉm tra n·∫øu PDF kh√¥ng c√≥ pages (image-based PDF ho·∫∑c corrupt)
    if not has_pages:
        logger.error("‚ùå pdfplumber kh√¥ng ƒë·ªçc ƒë∆∞·ª£c c·∫•u tr√∫c PDF (c√≥ th·ªÉ l√† image-based PDF)")
        
        # ƒê·∫øm s·ªë trang b·∫±ng PyPDF2
        try:
            import PyPDF2
            with open(path, 'rb') as f:
                reader = PyPDF2.PdfReader(f)
                num_pages = len(reader.pages)
                logger.warning(f"‚ö†Ô∏è PDF c√≥ {num_pages} trang nh∆∞ng l√† IMAGE-BASED")
        except:
            num_pages = "unknown"
        
        if pdf:
            pdf.close()
        
        # S·ª≠ d·ª•ng Tesseract OCR cho image-based PDF
        logger.info("üìä S·ª≠ d·ª•ng Tesseract OCR cho image-based PDF")
        return extract_pdf_with_tesseract(path)
    
    # PDF h·ª£p l·ªá, ti·∫øp t·ª•c v·ªõi pdfplumber
    # --- Ph√¢n t√≠ch t·ª´ng trang v·ªõi pdfplumber + OCR ---
    logger.info("ƒêang ph√¢n t√≠ch t·ª´ng trang (pdfplumber + EasyOCR)...")
    for i, page in enumerate(pdf.pages, 1):
        logger.debug(f"ƒêang x·ª≠ l√Ω trang {i}/{len(pdf.pages)}...")
        page_data = {"page_number": i, "text": "", "tables": [], "source": "manual"}
        
        text = page.extract_text(layout=False) or ""  # layout=False ƒë·ªÉ gi·∫£m kho·∫£ng tr·∫Øng
        text = clean_extracted_text(text)  # L√†m s·∫°ch vƒÉn b·∫£n
        tables = page.extract_tables() or []
        
        # L√†m s·∫°ch b·∫£ng n·∫øu c√≥
        if tables:
            tables = [clean_table_text(table) for table in tables]
        
        # N·∫øu trang c√≥ √≠t text v√† kh√¥ng c√≥ b·∫£ng -> kh·∫£ nƒÉng l√† ·∫£nh -> d√πng OCR
        if len(text.strip()) < 100 and not tables:
            logger.info(f"Trang {i} c√≥ √≠t vƒÉn b·∫£n, ƒëang ch·∫°y OCR (EasyOCR)...")
            ocr_text = ocr_on_page(page)
            page_data["text"] = clean_extracted_text(ocr_text)
            page_data["source"] = "ocr"
        else:
            page_data["text"] = text
            page_data["tables"] = tables
        
        pages.append(page_data)
    
    # ƒê√≥ng PDF
    pdf.close()
    
    return pages

# --- MAIN SCRIPT EXECUTION ---
def main():
    from src.config import PDF_PATH
    if not os.path.exists(PDF_PATH):
        logger.error(f"Kh√¥ng t√¨m th·∫•y file PDF t·∫°i ƒë∆∞·ªùng d·∫´n trong config.py: `{PDF_PATH}`")
        return
    
    try:
        logger.info(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file: {PDF_PATH}...")
        extracted_pages = extract_pdf_pages(PDF_PATH)
        logger.info(f"‚úÖ Ho√†n th√†nh! Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(extracted_pages)} trang")
        
        if extracted_pages:
            p1 = extracted_pages[0]
            print("\n--- PREVIEW TRANG 1 ---")  # Gi·ªØ print cho output
            print(f"Ngu·ªìn: {p1['source']}")
            print(f"N·ªôi dung: {p1['text'][:500]}...")
            if p1['tables']:
                print(f"T√¨m th·∫•y {len(p1['tables'])} b·∫£ng.")
            
    except Exception as e:
        logger.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)

if __name__ == "__main__":
    main()
