import os
import logging
import pdfplumber
from typing import List, Dict
import warnings
from PIL import Image
import numpy as np
import torch
import easyocr

# Import class GeminiClient
from src.gemini_client import GeminiClient
from src.logging_config import get_logger

# --- SETUP ---
logger = get_logger(__name__)
logging.getLogger("pdfplumber").setLevel(logging.ERROR)
warnings.filterwarnings("ignore", category=UserWarning)

# --- H√ÄM X·ª¨ L√ù V·ªöI GEMINI ---
def describe_pdf_with_gemini(images: List[Image.Image], gemini_client: GeminiClient) -> str:
    """
    G·ª≠i t·∫•t c·∫£ ·∫£nh c·ªßa c√°c trang PDF ƒë·∫øn Gemini trong m·ªôt y√™u c·∫ßu duy nh·∫•t.
    """
    if not gemini_client:
        return "[L·ªói Gemini: Client ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh]"

    # X√¢y d·ª±ng prompt v·ªõi h∆∞·ªõng d·∫´n chi ti·∫øt
    prompt_parts = [
        '''B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i li·ªáu v√† slide thuy·∫øt tr√¨nh.
Nhi·ªám v·ª• c·ªßa b·∫°n l√† xem m·ªôt lo·∫°t h√¨nh ·∫£nh c·ªßa c√°c trang t√†i li·ªáu v√† chuy·ªÉn ƒë·ªïi TO√ÄN B·ªò t√†i li·ªáu ƒë√≥ th√†nh m·ªôt vƒÉn b·∫£n Markdown chi ti·∫øt, c√≥ c·∫•u tr√∫c.

QUY T·∫ÆC QUAN TR·ªåNG:
1.  X·ª≠ l√Ω t·ª´ng ·∫£nh theo th·ª© t·ª± ƒë∆∞·ª£c cung c·∫•p.
2.  V·ªõi m·ªói ·∫£nh (m·ªói trang), h√£y B·∫ÆT ƒê·∫¶U ph·∫ßn n·ªôi dung c·ªßa trang ƒë√≥ b·∫±ng m·ªôt d√≤ng duy nh·∫•t ch·ª©a `--- PAGE [s·ªë trang] ---`. V√≠ d·ª•: `--- PAGE 1 ---`, `--- PAGE 2 ---`.
3.  Sau d√≤ng ph√¢n c√°ch ƒë√≥, h√£y tr√≠ch xu·∫•t n·ªôi dung c·ªßa trang ƒë√≥ theo ƒë·ªãnh d·∫°ng Markdown:
    - Gi·ªØ l·∫°i c√°c ti√™u ƒë·ªÅ, ƒë·ªÅ m·ª•c.
    - Chuy·ªÉn ƒë·ªïi c√°c danh s√°ch (bullet points) th√†nh danh s√°ch Markdown.
    - Tr√≠ch xu·∫•t v√† t√°i t·∫°o l·∫°i c√°c b·∫£ng bi·ªÉu m·ªôt c√°ch ch√≠nh x√°c nh·∫•t c√≥ th·ªÉ ·ªü ƒë·ªãnh d·∫°ng Markdown table.
    - Di·ªÖn gi·∫£i v√† t√≥m t·∫Øt n·ªôi dung ch√≠nh c·ªßa trang m·ªôt c√°ch m·∫°ch l·∫°c.
4.  Lu√¥n tr·∫£ l·ªùi b·∫±ng ng√¥n ng·ªØ g·ªëc c·ªßa vƒÉn b·∫£n trong t√†i li·ªáu.
5.  ƒê·∫£m b·∫£o r·∫±ng M·ªñI trang ƒë·ªÅu c√≥ m·ªôt d√≤ng ph√¢n c√°ch `--- PAGE [s·ªë trang] ---` ·ªü ƒë·∫ßu.

B√¢y gi·ªù, h√£y b·∫Øt ƒë·∫ßu x·ª≠ l√Ω c√°c trang sau:
'''
    ]

    # Th√™m t·∫•t c·∫£ c√°c ·∫£nh v√†o danh s√°ch c√°c ph·∫ßn c·ªßa prompt
    prompt_parts.extend(images)

    try:
        logger.info(f"üß† ƒêang g·ª≠i {len(images)} trang ƒë·∫øn Gemini...")
        # generate_content c·ªßa GeminiClient ƒë√£ t·ª± ƒë·ªông tr·∫£ v·ªÅ text
        response_text = gemini_client.generate_content(prompt_parts)
        return response_text
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi g·ªçi Gemini Vision cho to√†n b·ªô PDF: {e}")
        return "[L·ªói Gemini: Kh√¥ng th·ªÉ ph√¢n t√≠ch PDF]"

# --- PH∆Ø∆†NG √ÅN D·ª∞ PH√íNG: OCR ---
_ocr_reader = None
def get_ocr_reader():
    global _ocr_reader
    if _ocr_reader is None:
        try:
            logger.info("üîé Kh·ªüi t·∫°o tr√¨nh ƒë·ªçc OCR (ph∆∞∆°ng √°n d·ª± ph√≤ng)...")
            use_gpu = torch.cuda.is_available()
            logger.info(f"EasyOCR s·∫Ω s·ª≠ d·ª•ng {'GPU' if use_gpu else 'CPU'}")
            _ocr_reader = easyocr.Reader(['vi', 'en'], gpu=use_gpu)
        except Exception as e:
            logger.error(f"L·ªói nghi√™m tr·ªçng khi kh·ªüi t·∫°o EasyOCR: {e}")
            return None
    return _ocr_reader

def ocr_on_page(page) -> str:
    reader = get_ocr_reader()
    if not reader:
        return "[L·ªói OCR: Kh√¥ng th·ªÉ kh·ªüi t·∫°o tr√¨nh ƒë·ªçc]"
    try:
        img = page.to_image(resolution=300).original
        results = reader.readtext(np.array(img))
        return "\n".join([text for _, text, _ in results])
    except Exception as e:
        return f"[L·ªói khi ƒëang ch·∫°y OCR tr√™n trang: {e}]"

def gemini_ocr_on_page(page, vision_client: GeminiClient) -> str:
    """
    S·ª≠ d·ª•ng Gemini Vision ƒë·ªÉ OCR m·ªôt trang duy nh·∫•t.
    """
    if not vision_client:
        return "[L·ªói Gemini: Vision client ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh]"
    try:
        logger.debug("üß† G·ª≠i trang ƒë·∫øn Gemini Vision ƒë·ªÉ OCR...")
        img = page.to_image(resolution=300).original
        response_text = vision_client.generate_content(["Tr√≠ch xu·∫•t to√†n b·ªô vƒÉn b·∫£n t·ª´ h√¨nh ·∫£nh n√†y.", img])
        return response_text
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi g·ªçi Gemini Vision cho trang: {e}")
        return "[L·ªói Gemini: Kh√¥ng th·ªÉ OCR trang]"

# --- H√ÄM TR√çCH XU·∫§T CH√çNH (Logic k·∫øt h·ª£p) ---
def extract_pdf_pages(path: str) -> List[Dict]:
    logger.info("‚ú® C·∫•u h√¨nh Gemini...")
    gemini_client = None
    vision_client = None
    
    try:
        # Kh·ªüi t·∫°o client - s·∫Ω t·ª± ƒë·ªông s·ª≠ d·ª•ng danh s√°ch model t·ª´ config.py
        # Model m·∫∑c ƒë·ªãnh: gemini-2.0-flash-exp ‚Üí gemini-1.5-flash ‚Üí gemini-1.5-flash-8b
        gemini_client = GeminiClient()
        logger.info("‚úÖ Gemini text client ƒë√£ s·∫µn s√†ng v·ªõi model fallback")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫•u h√¨nh Gemini: {e}. S·∫Ω t·ª± ƒë·ªông d√πng ph∆∞∆°ng √°n 2")
    
    try:
        # Kh·ªüi t·∫°o client cho vision tasks (c√≥ th·ªÉ d√πng c√πng model ho·∫∑c model kh√°c)
        vision_client = GeminiClient()
        logger.info("‚úÖ Gemini vision client ƒë√£ s·∫µn s√†ng v·ªõi model fallback")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫•u h√¨nh Gemini Vision: {e}. OCR b·∫±ng Gemini s·∫Ω kh√¥ng kh·∫£ d·ª•ng")

    # --- H·ªèi ng∆∞·ªùi d√πng l·ª±a ch·ªçn ph∆∞∆°ng √°n ---
    use_gemini = False
    if gemini_client: # Ch·ªâ h·ªèi n·∫øu Gemini c√≥ s·∫µn
        while True:
            choice = input("‚ú® B·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng ph∆∞∆°ng √°n 1 (Ph√¢n t√≠ch b·∫±ng Gemini Vision)? (Y/N): ").strip().upper()
            if choice in ['Y', 'N']:
                break
            print("   -> L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p Y ho·∫∑c N.")
        
        if choice == 'Y':
            use_gemini = True
            print("   -> B·∫°n ƒë√£ ch·ªçn ph∆∞∆°ng √°n 1 (Gemini Vision).")
        else:
            print("   -> B·∫°n ƒë√£ ch·ªçn ph∆∞∆°ng √°n 2 (Ph√¢n t√≠ch th·ªß c√¥ng/OCR).")

    pages = []
    with pdfplumber.open(path) as pdf:
        # --- PH∆Ø∆†NG √ÅN 1: D√ôNG GEMINI (BULK) ---
        if use_gemini and gemini_client:
            logger.info(f"ƒêang chu·∫©n b·ªã h√¨nh ·∫£nh t·ª´ {len(pdf.pages)} trang cho Gemini...")
            all_page_images = [page.to_image(resolution=300).original for page in pdf.pages]
            
            # G·ªçi h√†m m·ªõi ƒë·ªÉ x·ª≠ l√Ω t·∫•t c·∫£ ·∫£nh c√πng l√∫c
            full_pdf_description = describe_pdf_with_gemini(all_page_images, gemini_client)

            # N·∫øu Gemini g·∫∑p l·ªói, chuy·ªÉn sang ph∆∞∆°ng √°n 2
            if "[L·ªói Gemini" in full_pdf_description:
                logger.warning("Gemini g·∫∑p l·ªói khi x·ª≠ l√Ω h√†ng lo·∫°t, chuy·ªÉn sang ph∆∞∆°ng √°n 2: Ph√¢n t√≠ch th·ªß c√¥ng...")
                use_gemini = False # ƒê·∫∑t l·∫°i c·ªù ƒë·ªÉ ch·∫°y logic fallback
            else:
                logger.info("Gemini ph√¢n t√≠ch to√†n b·ªô PDF th√†nh c√¥ng! ƒêang x·ª≠ l√Ω k·∫øt qu·∫£...")
                # T√°ch k·∫øt qu·∫£ tr·∫£ v·ªÅ th√†nh t·ª´ng trang
                page_contents = full_pdf_description.split("--- PAGE ")
                
                for page_content in page_contents:
                    if not page_content.strip():
                        continue
                    
                    try:
                        # T√°ch s·ªë trang v√† n·ªôi dung
                        page_num_str, content = page_content.split(" ---", 1)
                        page_num = int(page_num_str.strip())
                        content = content.strip()
                        
                        pages.append({
                            "page_number": page_num,
                            "text": content,
                            "tables": [], # Gemini ƒë√£ chuy·ªÉn b·∫£ng th√†nh Markdown trong text
                            "source": "gemini" # ƒê·ªïi l·∫°i th√†nh "gemini" ƒë·ªÉ t∆∞∆°ng th√≠ch
                        })
                    except ValueError:
                        logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch n·ªôi dung tr·∫£ v·ªÅ cho m·ªôt trang: {page_content[:100]}...")
                        continue
                
                # S·∫Øp x·∫øp l·∫°i c√°c trang ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√∫ng th·ª© t·ª±
                pages.sort(key=lambda p: p['page_number'])
                logger.info(f"‚úÖ ƒê√£ x·ª≠ l√Ω v√† l∆∞u l·∫°i {len(pages)} trang t·ª´ k·∫øt qu·∫£ c·ªßa Gemini")
                return pages # Tr·∫£ v·ªÅ k·∫øt qu·∫£ v√† k·∫øt th√∫c s·ªõm

        # --- PH∆Ø∆†NG √ÅN 2: TH·ª¶ C√îNG / OCR (FALLBACK) ---
        # Logic n√†y s·∫Ω ch·∫°y n·∫øu ng∆∞·ªùi d√πng kh√¥ng ch·ªçn Gemini ban ƒë·∫ßu,
        # ho·∫∑c n·∫øu Gemini g·∫∑p l·ªói ·ªü b∆∞·ªõc tr√™n.
        logger.info("ƒêang ph√¢n t√≠ch t·ª´ng trang theo ph∆∞∆°ng √°n 2 (Th·ªß c√¥ng/OCR)...")
        for i, page in enumerate(pdf.pages, 1):
            logger.debug(f"ƒêang x·ª≠ l√Ω trang {i}/{len(pdf.pages)}...")
            page_data = {"page_number": i, "text": "", "tables": [], "source": "manual"}
            
            text = page.extract_text(layout=True) or ""
            tables = page.extract_tables() or []
            
            # N·∫øu trang c√≥ √≠t text v√† kh√¥ng c√≥ b·∫£ng -> kh·∫£ nƒÉng l√† ·∫£nh -> d√πng OCR
            if len(text.strip()) < 100 and not tables:
                # ∆Øu ti√™n d√πng Gemini Vision n·∫øu c√≥
                if vision_client:
                    page_data["text"] = gemini_ocr_on_page(page, vision_client)
                    page_data["source"] = "gemini-ocr"
                else:
                    logger.info(f"Trang {i} c√≥ √≠t vƒÉn b·∫£n, ƒëang ch·∫°y OCR (EasyOCR)...")
                    page_data["text"] = ocr_on_page(page)
                    page_data["source"] = "ocr"
            else:
                page_data["text"] = text
                page_data["tables"] = tables
            
            pages.append(page_data)
            
    return pages

# --- MAIN SCRIPT EXECUTION ---
def main():
    from src.config import PDF_PATH
    if not os.path.exists(PDF_PATH):
        logger.error(f"Kh√¥ng t√¨m th·∫•y file PDF t·∫°i ƒë∆∞·ªùng d·∫´n trong config.py: `{PDF_PATH}`")
        return
    
    try:
        logger.info(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file: {PDF_PATH}...")
        extracted_pages = extract_pdf_pages(PDF_PATH)
        logger.info(f"‚úÖ Ho√†n th√†nh! Tr√≠ch xu·∫•t ƒë∆∞·ª£c {len(extracted_pages)} trang")
        
        if extracted_pages:
            p1 = extracted_pages[0]
            print("\n--- PREVIEW TRANG 1 ---")  # Gi·ªØ print cho output
            print(f"Ngu·ªìn: {p1['source']}")
            print(f"N·ªôi dung: {p1['text'][:500]}...")
            if p1['tables']:
                print(f"T√¨m th·∫•y {len(p1['tables'])} b·∫£ng.")
            
    except Exception as e:
        logger.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)

if __name__ == "__main__":
    main()
