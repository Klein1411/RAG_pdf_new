"""
PDF Manager cho Agent.

Qu·∫£n l√Ω:
- Danh s√°ch PDF files
- Export MD status
- Collection sync
"""

import sys
from pathlib import Path
from typing import List, Dict, Optional, Tuple, Any
from datetime import datetime

# Add project root
project_root = Path(__file__).parent.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

from src.config import PDF_DIR, OUTPUT_DIR, COLLECTION_NAME
from src.logging_config import get_logger
from pymilvus import Collection, connections

logger = get_logger(__name__)


class PDFManager:
    """
    Qu·∫£n l√Ω PDF files v√† export status.
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o PDF Manager."""
        self.pdf_dir = Path(PDF_DIR)
        self.output_dir = Path(OUTPUT_DIR)
        self.current_pdf = None  # Current active PDF
        
        # Ensure directories exist
        self.pdf_dir.mkdir(parents=True, exist_ok=True)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        logger.info("‚úÖ PDFManager ƒë√£ kh·ªüi t·∫°o")
    
    def list_pdfs(self) -> List[Path]:
        """
        L·∫•y danh s√°ch t·∫•t c·∫£ PDF files.
        
        Returns:
            List of PDF file paths
        """
        pdfs = sorted(self.pdf_dir.glob("*.pdf"))
        logger.info(f"üìÑ T√¨m th·∫•y {len(pdfs)} PDF files")
        return pdfs
    
    def get_md_path(self, pdf_path: Path) -> Path:
        """
        L·∫•y ƒë∆∞·ªùng d·∫´n MD file t∆∞∆°ng ·ª©ng v·ªõi PDF.
        
        Args:
            pdf_path: Path to PDF file
            
        Returns:
            Path to MD file
        """
        md_filename = pdf_path.stem + ".md"
        return self.output_dir / md_filename
    
    def check_md_exists(self, pdf_path: Path) -> bool:
        """
        Ki·ªÉm tra MD file c√≥ t·ªìn t·∫°i kh√¥ng.
        
        Args:
            pdf_path: Path to PDF file
            
        Returns:
            True n·∫øu MD exists
        """
        md_path = self.get_md_path(pdf_path)
        exists = md_path.exists()
        
        if exists:
            logger.info(f"‚úÖ MD file exists: {md_path.name}")
        else:
            logger.info(f"‚ùå MD file not found: {md_path.name}")
        
        return exists
    
    def get_file_info(self, pdf_path: Path) -> Dict[str, Any]:
        """
        L·∫•y th√¥ng tin v·ªÅ PDF v√† MD file.
        
        Args:
            pdf_path: Path to PDF file
            
        Returns:
            Dict v·ªõi file info
        """
        md_path = self.get_md_path(pdf_path)
        md_exists = md_path.exists()
        
        info = {
            'pdf_name': pdf_path.name,
            'pdf_path': str(pdf_path),
            'pdf_size': pdf_path.stat().st_size if pdf_path.exists() else 0,
            'md_name': md_path.name,
            'md_path': str(md_path),
            'md_exists': md_exists,
            'md_size': md_path.stat().st_size if md_exists else 0,
            'pdf_modified': datetime.fromtimestamp(pdf_path.stat().st_mtime) if pdf_path.exists() else None,
            'md_modified': datetime.fromtimestamp(md_path.stat().st_mtime) if md_exists else None
        }
        
        # Check if MD is outdated
        if md_exists and info['pdf_modified'] and info['md_modified']:
            info['md_outdated'] = info['pdf_modified'] > info['md_modified']
        else:
            info['md_outdated'] = False
        
        return info
    
    def select_pdf(self, pdf_name: Optional[str] = None) -> Optional[Path]:
        """
        Ch·ªçn PDF file ƒë·ªÉ l√†m vi·ªác.
        
        Args:
            pdf_name: T√™n PDF file (None = h·ªèi user ch·ªçn)
            
        Returns:
            Path to selected PDF, ho·∫∑c None n·∫øu kh√¥ng ch·ªçn
        """
        pdfs = self.list_pdfs()
        
        if not pdfs:
            logger.warning("‚ö†Ô∏è Kh√¥ng c√≥ PDF n√†o trong th∆∞ m·ª•c")
            print("\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y PDF n√†o trong th∆∞ m·ª•c data/pdfs/")
            return None
        
        # If pdf_name specified, find it
        if pdf_name:
            for pdf in pdfs:
                if pdf.name == pdf_name or pdf.stem == pdf_name:
                    self.current_pdf = pdf
                    logger.info(f"üìÑ ƒê√£ ch·ªçn PDF: {pdf.name}")
                    return pdf
            
            logger.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y PDF: {pdf_name}")
            print(f"\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y PDF: {pdf_name}")
            return None
        
        # Otherwise, show menu
        print("\nüìö Danh s√°ch PDF files:")
        for i, pdf in enumerate(pdfs, 1):
            info = self.get_file_info(pdf)
            size_mb = info['pdf_size'] / (1024 * 1024)
            status = "‚úÖ (c√≥ MD)" if info['md_exists'] else "‚ùå (ch∆∞a MD)"
            outdated = " ‚ö†Ô∏è MD c≈©" if info.get('md_outdated') else ""
            print(f"   {i}. {pdf.name} ({size_mb:.2f} MB) {status}{outdated}")
        
        # Get selection
        try:
            choice = input(f"\nüëâ Ch·ªçn PDF (1-{len(pdfs)}) ho·∫∑c Enter ƒë·ªÉ d√πng t·∫•t c·∫£: ").strip()
            
            if not choice:
                logger.info("üìÑ S·ª≠ d·ª•ng t·∫•t c·∫£ PDF files")
                self.current_pdf = None
                return None
            
            idx = int(choice) - 1
            if 0 <= idx < len(pdfs):
                self.current_pdf = pdfs[idx]
                logger.info(f"üìÑ ƒê√£ ch·ªçn PDF: {self.current_pdf.name}")
                return self.current_pdf
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
                return None
                
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë")
            return None
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è ƒê√£ h·ªßy")
            return None
    
    def should_export_md(self, pdf_path: Path) -> bool:
        """
        H·ªèi user c√≥ mu·ªën export MD kh√¥ng.
        
        Args:
            pdf_path: Path to PDF file
            
        Returns:
            True n·∫øu c·∫ßn export
        """
        info = self.get_file_info(pdf_path)
        
        if not info['md_exists']:
            print(f"\nüìù MD file ch∆∞a t·ªìn t·∫°i cho {pdf_path.name}")
            print("   ‚û°Ô∏è C·∫ßn export MD tr∆∞·ªõc khi s·ª≠ d·ª•ng RAG")
            return True
        
        if info.get('md_outdated'):
            print(f"\n‚ö†Ô∏è MD file c≈© h∆°n PDF ({pdf_path.name})")
            print(f"   PDF modified: {info['pdf_modified']}")
            print(f"   MD modified: {info['md_modified']}")
        else:
            print(f"\n‚úÖ MD file ƒë√£ t·ªìn t·∫°i cho {pdf_path.name}")
            print(f"   MD file: {info['md_name']} ({info['md_size'] / 1024:.2f} KB)")
        
        # Ask user
        try:
            choice = input("\nüëâ B·∫°n c√≥ mu·ªën export l·∫°i MD? (y/N): ").strip().lower()
            return choice in ['y', 'yes', 'c√≥']
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Gi·ªØ nguy√™n MD hi·ªán t·∫°i")
            return False
    
    def check_collection(self) -> Dict[str, Any]:
        """
        Ki·ªÉm tra Milvus collection status.
        
        Returns:
            Dict v·ªõi collection info
        """
        try:
            # Connect
            connections.connect(host="localhost", port="19530")
            
            # Load collection
            collection = Collection(COLLECTION_NAME)
            collection.load()
            
            num_entities = collection.num_entities
            
            info = {
                'exists': True,
                'name': COLLECTION_NAME,
                'num_entities': num_entities,
                'empty': num_entities == 0
            }
            
            logger.info(f"üìä Collection: {COLLECTION_NAME} ({num_entities} entities)")
            return info
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi ki·ªÉm tra collection: {e}")
            return {
                'exists': False,
                'name': COLLECTION_NAME,
                'error': str(e)
            }
    
    def should_reindex(self, will_export: bool) -> bool:
        """
        H·ªèi user c√≥ mu·ªën reindex collection kh√¥ng.
        
        Args:
            will_export: C√≥ export MD m·ªõi kh√¥ng
            
        Returns:
            True n·∫øu c·∫ßn reindex
        """
        collection_info = self.check_collection()
        
        if not collection_info['exists']:
            print(f"\n‚ùå Collection '{COLLECTION_NAME}' kh√¥ng t·ªìn t·∫°i")
            print("   ‚û°Ô∏è C·∫ßn t·∫°o v√† index collection")
            return True
        
        if collection_info['empty']:
            print(f"\n‚ö†Ô∏è Collection '{COLLECTION_NAME}' ƒëang tr·ªëng")
            print("   ‚û°Ô∏è C·∫ßn index d·ªØ li·ªáu")
            return True
        
        print(f"\n‚úÖ Collection ƒë√£ c√≥ {collection_info['num_entities']} documents")
        
        if will_export:
            print("   ‚ö†Ô∏è V√¨ b·∫°n s·∫Ω export MD m·ªõi, n√™n c·∫ßn reindex ƒë·ªÉ ƒë·ªìng b·ªô")
            return True
        
        # Ask user
        try:
            choice = input("\nüëâ B·∫°n c√≥ mu·ªën reindex collection? (y/N): ").strip().lower()
            return choice in ['y', 'yes', 'c√≥']
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Gi·ªØ nguy√™n collection hi·ªán t·∫°i")
            return False
    
    def get_current_pdf(self) -> Optional[Path]:
        """L·∫•y current PDF ƒëang active."""
        return self.current_pdf


# --- CONVENIENCE FUNCTIONS ---

_pdf_manager = None

def get_pdf_manager() -> PDFManager:
    """Get singleton PDF manager instance."""
    global _pdf_manager
    if _pdf_manager is None:
        _pdf_manager = PDFManager()
    return _pdf_manager


# --- TEST ---
if __name__ == "__main__":
    print("=== Testing PDFManager ===\n")
    
    manager = PDFManager()
    
    # List PDFs
    print("1. Danh s√°ch PDF files:")
    pdfs = manager.list_pdfs()
    for pdf in pdfs:
        info = manager.get_file_info(pdf)
        print(f"\n   PDF: {info['pdf_name']}")
        print(f"   Size: {info['pdf_size'] / 1024:.2f} KB")
        print(f"   MD exists: {info['md_exists']}")
        if info['md_exists']:
            print(f"   MD size: {info['md_size'] / 1024:.2f} KB")
            print(f"   Outdated: {info['md_outdated']}")
    
    # Check collection
    print("\n\n2. Collection status:")
    collection_info = manager.check_collection()
    print(f"   Exists: {collection_info.get('exists')}")
    if collection_info.get('exists'):
        print(f"   Entities: {collection_info.get('num_entities')}")
    
    print("\n=== Test completed ===")
