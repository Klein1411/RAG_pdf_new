"""
Collection Tool - Tool qu·∫£n l√Ω Milvus collections.

T√°ch logic qu·∫£n l√Ω collection t·ª´ agent.py.
Wrap CollectionManager v·ªõi interface th√¢n thi·ªán cho Agent.
"""

import sys
from pathlib import Path
from typing import List, Dict, Optional, Any

# Add project root
project_root = Path(__file__).parent.parent.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

from agent.collection_manager import get_collection_manager
from src.logging_config import get_logger

logger = get_logger(__name__)


class CollectionTool:
    """
    Tool qu·∫£n l√Ω Milvus collections.
    
    Ch·ª©c nƒÉng:
    - List collections v·ªõi metadata
    - Add/remove collections
    - Check collection status
    - Select collections cho agent
    """
    
    def __init__(self, collection_manager=None):
        """
        Kh·ªüi t·∫°o Collection Tool.
        
        Args:
            collection_manager: CollectionManager instance (optional, s·∫Ω t·∫°o m·ªõi n·∫øu kh√¥ng c√≥)
        """
        self.collection_manager = collection_manager or get_collection_manager()
        logger.info("‚úÖ CollectionTool initialized")
    
    def list_collections(self) -> List[Dict[str, Any]]:
        """
        List t·∫•t c·∫£ collections v·ªõi metadata.
        
        Returns:
            List of dicts v·ªõi keys: name, num_entities, created_time
        """
        try:
            collections = self.collection_manager.list_collections()
            logger.info(f"üìã Found {len(collections)} collections")
            return collections
        except Exception as e:
            logger.error(f"‚ùå Error listing collections: {e}")
            return []
    
    def get_collection_info(self, collection_name: str) -> Optional[Dict[str, Any]]:
        """
        L·∫•y th√¥ng tin chi ti·∫øt c·ªßa collection.
        
        Args:
            collection_name: T√™n collection
            
        Returns:
            Dict v·ªõi metadata ho·∫∑c None n·∫øu kh√¥ng t·ªìn t·∫°i
        """
        try:
            if not self.collection_manager.collection_exists(collection_name):
                logger.warning(f"‚ö†Ô∏è Collection '{collection_name}' kh√¥ng t·ªìn t·∫°i")
                return None
            
            # Get info t·ª´ list_collections
            all_collections = self.collection_manager.list_collections()
            for col in all_collections:
                if col['name'] == collection_name:
                    logger.info(f"‚ÑπÔ∏è Collection '{collection_name}': {col}")
                    return col
            
            return None
        except Exception as e:
            logger.error(f"‚ùå Error getting collection info: {e}")
            return None
    
    def add_collection(self, pdf_path: str, force_rebuild: bool = False) -> Dict[str, Any]:
        """
        T·∫°o collection m·ªõi t·ª´ PDF.
        
        Args:
            pdf_path: Path ƒë·∫øn file PDF
            force_rebuild: N·∫øu True, x√≥a collection c≈© n·∫øu c√≥
            
        Returns:
            Dict v·ªõi keys:
                - success: bool
                - collection_name: str
                - message: str
                - num_entities: int (n·∫øu success)
        """
        try:
            pdf_path_obj = Path(pdf_path)
            if not pdf_path_obj.exists():
                return {
                    'success': False,
                    'collection_name': None,
                    'message': f"PDF file kh√¥ng t·ªìn t·∫°i: {pdf_path}"
                }
            
            collection_name = self.collection_manager.get_collection_name(pdf_path_obj.name)
            
            # Ki·ªÉm tra n·∫øu ƒë√£ t·ªìn t·∫°i
            if self.collection_manager.collection_exists(collection_name):
                if force_rebuild:
                    logger.info(f"üîÑ Rebuilding collection '{collection_name}'")
                    self.collection_manager.delete_collection(collection_name)
                else:
                    return {
                        'success': False,
                        'collection_name': collection_name,
                        'message': f"Collection '{collection_name}' ƒë√£ t·ªìn t·∫°i. D√πng force_rebuild=True ƒë·ªÉ t·∫°o l·∫°i."
                    }
            
            # T·∫°o collection
            logger.info(f"üì¶ Creating collection from {pdf_path_obj.name}...")
            col_name, success = self.collection_manager.create_and_populate_collection(str(pdf_path_obj))
            
            if success:
                # Get info t·ª´ list_collections
                info = self.get_collection_info(col_name)
                return {
                    'success': True,
                    'collection_name': col_name,
                    'message': f"ƒê√£ t·∫°o collection '{col_name}' th√†nh c√¥ng",
                    'num_entities': info.get('num_entities', 0) if info else 0
                }
            else:
                return {
                    'success': False,
                    'collection_name': col_name,
                    'message': f"Kh√¥ng th·ªÉ t·∫°o collection cho {pdf_path_obj.name}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå Error creating collection: {e}")
            return {
                'success': False,
                'collection_name': None,
                'message': f"L·ªói: {str(e)}"
            }
    
    def remove_collection(self, collection_name: str) -> Dict[str, Any]:
        """
        X√≥a collection.
        
        Args:
            collection_name: T√™n collection c·∫ßn x√≥a
            
        Returns:
            Dict v·ªõi keys:
                - success: bool
                - message: str
        """
        try:
            if not self.collection_manager.collection_exists(collection_name):
                return {
                    'success': False,
                    'message': f"Collection '{collection_name}' kh√¥ng t·ªìn t·∫°i"
                }
            
            self.collection_manager.delete_collection(collection_name)
            logger.info(f"üóëÔ∏è Deleted collection '{collection_name}'")
            
            return {
                'success': True,
                'message': f"ƒê√£ x√≥a collection '{collection_name}'"
            }
        except Exception as e:
            logger.error(f"‚ùå Error deleting collection: {e}")
            return {
                'success': False,
                'message': f"L·ªói khi x√≥a: {str(e)}"
            }
    
    def check_collection_status(self, collection_name: str) -> Dict[str, Any]:
        """
        Ki·ªÉm tra tr·∫°ng th√°i collection.
        
        Args:
            collection_name: T√™n collection
            
        Returns:
            Dict v·ªõi keys:
                - exists: bool
                - num_entities: int (n·∫øu exists)
                - status: str
                - message: str
        """
        try:
            if not self.collection_manager.collection_exists(collection_name):
                return {
                    'exists': False,
                    'status': 'not_found',
                    'message': f"Collection '{collection_name}' kh√¥ng t·ªìn t·∫°i"
                }
            
            # Get info t·ª´ list_collections
            info = self.get_collection_info(collection_name)
            num_entities = info.get('num_entities', 0) if info else 0
            
            return {
                'exists': True,
                'num_entities': num_entities,
                'status': 'ready',
                'message': f"Collection '{collection_name}' s·∫µn s√†ng v·ªõi {num_entities} entities"
            }
        except Exception as e:
            logger.error(f"‚ùå Error checking collection: {e}")
            return {
                'exists': False,
                'status': 'error',
                'message': f"L·ªói: {str(e)}"
            }
    
    def rebuild_collection(self, collection_name: str) -> Dict[str, Any]:
        """
        Rebuild collection (x√≥a v√† t·∫°o l·∫°i).
        
        Args:
            collection_name: T√™n collection
            
        Returns:
            Dict v·ªõi keys:
                - success: bool
                - message: str
        """
        try:
            if not self.collection_manager.collection_exists(collection_name):
                return {
                    'success': False,
                    'message': f"Collection '{collection_name}' kh√¥ng t·ªìn t·∫°i"
                }
            
            # Get PDF path from collection metadata
            # (Collection name l√† sanitized PDF name)
            # C·∫ßn t√¨m PDF file t∆∞∆°ng ·ª©ng
            from agent.pdf_manager import get_pdf_manager
            pdf_manager = get_pdf_manager()
            
            # T√¨m PDF file
            pdfs = pdf_manager.list_pdfs()
            pdf_path = None
            for pdf in pdfs:
                if self.collection_manager.get_collection_name(pdf.name) == collection_name:
                    pdf_path = pdf
                    break
            
            if not pdf_path:
                return {
                    'success': False,
                    'message': f"Kh√¥ng t√¨m th·∫•y PDF cho collection '{collection_name}'"
                }
            
            # Delete v√† recreate
            logger.info(f"üîÑ Rebuilding collection '{collection_name}'...")
            self.collection_manager.delete_collection(collection_name)
            
            return self.add_collection(str(pdf_path), force_rebuild=False)
            
        except Exception as e:
            logger.error(f"‚ùå Error rebuilding collection: {e}")
            return {
                'success': False,
                'message': f"L·ªói khi rebuild: {str(e)}"
            }
    
    def batch_add_collections(
        self, 
        pdf_paths: List[str], 
        force_rebuild: bool = False,
        show_progress: bool = True
    ) -> Dict[str, Any]:
        """
        T·∫°o nhi·ªÅu collections c√πng l√∫c.
        
        Args:
            pdf_paths: List c√°c PDF paths
            force_rebuild: N·∫øu True, rebuild collections ƒë√£ t·ªìn t·∫°i
            show_progress: Hi·ªÉn th·ªã progress
            
        Returns:
            Dict v·ªõi keys:
                - success_count: int
                - failed_count: int
                - results: List[Dict] - k·∫øt qu·∫£ cho t·ª´ng PDF
        """
        results = []
        success_count = 0
        failed_count = 0
        
        for i, pdf_path in enumerate(pdf_paths, 1):
            if show_progress:
                print(f"[{i}/{len(pdf_paths)}] Processing {Path(pdf_path).name}...")
            
            result = self.add_collection(pdf_path, force_rebuild)
            results.append({
                'pdf_path': pdf_path,
                **result
            })
            
            if result['success']:
                success_count += 1
                if show_progress:
                    print(f"   ‚úÖ {result['message']}")
            else:
                failed_count += 1
                if show_progress:
                    print(f"   ‚ùå {result['message']}")
        
        return {
            'success_count': success_count,
            'failed_count': failed_count,
            'results': results
        }
    
    def get_collections_for_pdfs(self, pdf_names: List[str]) -> List[str]:
        """
        L·∫•y collection names t·ª´ PDF names.
        
        Args:
            pdf_names: List t√™n PDF (c√≥ th·ªÉ c√≥ ho·∫∑c kh√¥ng c√≥ .pdf)
            
        Returns:
            List collection names
        """
        collection_names = []
        for pdf_name in pdf_names:
            col_name = self.collection_manager.get_collection_name(pdf_name)
            if self.collection_manager.collection_exists(col_name):
                collection_names.append(col_name)
            else:
                logger.warning(f"‚ö†Ô∏è Collection cho '{pdf_name}' kh√¥ng t·ªìn t·∫°i")
        
        return collection_names
    
    def interactive_select_collections(
        self, 
        current_selection: Optional[List[str]] = None
    ) -> List[str]:
        """
        Interactive menu ƒë·ªÉ ch·ªçn collections.
        
        Args:
            current_selection: Collections hi·ªán ƒëang ƒë∆∞·ª£c ch·ªçn
            
        Returns:
            List collection names ƒë∆∞·ª£c ch·ªçn
        """
        current_selection = current_selection or []
        all_collections = self.list_collections()
        
        if not all_collections:
            print("\n‚ùå Kh√¥ng c√≥ collection n√†o")
            return current_selection
        
        print("\n" + "="*60)
        print("CH·ªåN COLLECTIONS")
        print("="*60)
        
        print(f"\nC√≥ s·∫µn ({len(all_collections)}):")
        for i, col in enumerate(all_collections, 1):
            status = "‚úì ƒêANG D√ôNG" if col['name'] in current_selection else "  "
            print(f"{i}. [{status}] {col['name']} ({col['num_entities']} docs)")
        
        print(f"\nƒêang d√πng: {len(current_selection)} collections")
        
        print("\nT√πy ch·ªçn:")
        print("  all      - Ch·ªçn t·∫•t c·∫£")
        print("  none     - B·ªè ch·ªçn t·∫•t c·∫£")
        print("  1,2,3    - Ch·ªçn theo s·ªë")
        print("  <Enter>  - Gi·ªØ nguy√™n")
        
        choice = input("\nCh·ªçn: ").strip().lower()
        
        if not choice:
            return current_selection
        elif choice == 'all':
            return [col['name'] for col in all_collections]
        elif choice == 'none':
            return []
        else:
            # Parse numbers
            selected = []
            for item in choice.split(','):
                item = item.strip()
                if item.isdigit():
                    idx = int(item) - 1
                    if 0 <= idx < len(all_collections):
                        selected.append(all_collections[idx]['name'])
            return selected


# Singleton pattern
_collection_tool = None

def get_collection_tool(collection_manager=None) -> CollectionTool:
    """
    Get ho·∫∑c t·∫°o CollectionTool instance (singleton).
    
    Args:
        collection_manager: CollectionManager instance (optional)
        
    Returns:
        CollectionTool instance
    """
    global _collection_tool
    if _collection_tool is None:
        _collection_tool = CollectionTool(collection_manager)
    return _collection_tool


def reset_collection_tool():
    """Reset singleton (d√πng cho testing)."""
    global _collection_tool
    _collection_tool = None


if __name__ == "__main__":
    # Test CollectionTool
    tool = get_collection_tool()
    
    print("\n=== Testing CollectionTool ===")
    
    # List collections
    print("\n1. List all collections:")
    collections = tool.list_collections()
    for col in collections:
        print(f"   - {col['name']}: {col['num_entities']} docs")
    
    # Check status
    if collections:
        print(f"\n2. Check status of first collection:")
        status = tool.check_collection_status(collections[0]['name'])
        print(f"   Status: {status}")
    
    print("\n‚úÖ Test completed")
