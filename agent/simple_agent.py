"""
Simple Agent - Phi√™n b·∫£n ƒë∆°n gi·∫£n c·ªßa Agent v·ªõi RAG capability

Agent n√†y c√≥ th·ªÉ:
1. Nh·∫≠n c√¢u h·ªèi t·ª´ user
2. S·ª≠ d·ª•ng RAG tool ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin
3. Tr·∫£ l·ªùi d·ª±a tr√™n th√¥ng tin t√¨m ƒë∆∞·ª£c
"""

import sys
from pathlib import Path
from typing import List, Dict, Any, Optional
from datetime import datetime

# Th√™m th∆∞ m·ª•c g·ªëc project v√†o sys.path
project_root = Path(__file__).parent.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

from agent.config import (
    AGENT_NAME,
    AGENT_DESCRIPTION,
    AGENT_SYSTEM_PROMPT,
    MAX_CONVERSATION_HISTORY
)
from agent.tools.rag_tool import create_rag_tool
from src.logging_config import get_logger

logger = get_logger(__name__)


class SimpleAgent:
    """
    Agent ƒë∆°n gi·∫£n v·ªõi kh·∫£ nƒÉng s·ª≠ d·ª•ng RAG tool.
    
    Attributes:
        name: T√™n c·ªßa agent
        description: M√¥ t·∫£ agent
        rag_tool: RAG tool instance
        conversation_history: L·ªãch s·ª≠ h·ªôi tho·∫°i
    """
    
    def __init__(self, name: Optional[str] = None, description: Optional[str] = None):
        """
        Kh·ªüi t·∫°o Agent.
        
        Args:
            name: T√™n agent (m·∫∑c ƒë·ªãnh t·ª´ config)
            description: M√¥ t·∫£ agent (m·∫∑c ƒë·ªãnh t·ª´ config)
        """
        self.name = name or AGENT_NAME
        self.description = description or AGENT_DESCRIPTION
        self.system_prompt = AGENT_SYSTEM_PROMPT
        
        logger.info(f"ü§ñ Kh·ªüi t·∫°o Agent: {self.name}")
        logger.info(f"   M√¥ t·∫£: {self.description}")
        
        # Kh·ªüi t·∫°o RAG tool
        self.rag_tool = create_rag_tool()
        
        # L·ªãch s·ª≠ h·ªôi tho·∫°i
        self.conversation_history: List[Dict[str, Any]] = []
        
        logger.info("‚úÖ Agent ƒë√£ s·∫µn s√†ng")
    
    def _add_to_history(self, role: str, content: str, metadata: Optional[Dict] = None):
        """
        Th√™m message v√†o l·ªãch s·ª≠ h·ªôi tho·∫°i.
        
        Args:
            role: 'user' ho·∫∑c 'assistant'
            content: N·ªôi dung message
            metadata: Metadata b·ªï sung
        """
        message = {
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat(),
            "metadata": metadata or {}
        }
        
        self.conversation_history.append(message)
        
        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng history
        if len(self.conversation_history) > MAX_CONVERSATION_HISTORY * 2:
            # Gi·ªØ l·∫°i c√°c message g·∫ßn ƒë√¢y nh·∫•t
            self.conversation_history = self.conversation_history[-(MAX_CONVERSATION_HISTORY * 2):]
    
    def _should_use_rag(self, question: str) -> bool:
        """
        Quy·∫øt ƒë·ªãnh c√≥ n√™n s·ª≠ d·ª•ng RAG tool hay kh√¥ng.
        
        Logic ƒë∆°n gi·∫£n: Lu√¥n d√πng RAG cho m·ªçi c√¢u h·ªèi.
        Sau n√†y c√≥ th·ªÉ improve b·∫±ng intent classification.
        
        Args:
            question: C√¢u h·ªèi c·ªßa user
            
        Returns:
            True n·∫øu n√™n d√πng RAG
        """
        # Simple version: Lu√¥n d√πng RAG
        return True
    
    def ask(self, question: str, verbose: bool = False) -> Dict[str, Any]:
        """
        H·ªèi Agent m·ªôt c√¢u h·ªèi.
        
        Args:
            question: C√¢u h·ªèi
            verbose: In th√™m th√¥ng tin chi ti·∫øt
            
        Returns:
            Dict ch·ª©a answer v√† metadata
        """
        logger.info(f"‚ùì User question: '{question}'")
        
        # Th√™m question v√†o history
        self._add_to_history("user", question)
        
        try:
            # Quy·∫øt ƒë·ªãnh c√≥ d√πng RAG kh√¥ng
            use_rag = self._should_use_rag(question)
            
            if use_rag:
                if verbose:
                    print("üîç ƒêang t√¨m ki·∫øm th√¥ng tin trong t√†i li·ªáu...")
                
                # S·ª≠ d·ª•ng RAG tool
                rag_result = self.rag_tool.ask(question, top_k=5, return_context=verbose)
                
                if rag_result["success"]:
                    answer = rag_result["answer"]
                    sources = rag_result["sources"]
                    
                    # Th√™m v√†o history
                    self._add_to_history(
                        "assistant",
                        answer,
                        metadata={
                            "method": "rag",
                            "sources": sources,
                            "source_count": len(sources)
                        }
                    )
                    
                    result = {
                        "success": True,
                        "answer": answer,
                        "sources": sources,
                        "method": "rag"
                    }
                    
                    if verbose and "context" in rag_result:
                        result["context"] = rag_result["context"]
                    
                    return result
                else:
                    # RAG failed, tr·∫£ v·ªÅ message l·ªói
                    answer = rag_result["answer"]
                    self._add_to_history("assistant", answer, metadata={"method": "rag_failed"})
                    
                    return {
                        "success": False,
                        "answer": answer,
                        "sources": [],
                        "method": "rag_failed"
                    }
            else:
                # Kh√¥ng d√πng RAG, tr·∫£ l·ªùi tr·ª±c ti·∫øp (future: d√πng LLM thu·∫ßn)
                answer = "Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi li√™n quan ƒë·∫øn t√†i li·ªáu ƒë√£ ƒë∆∞·ª£c index."
                self._add_to_history("assistant", answer, metadata={"method": "direct"})
                
                return {
                    "success": False,
                    "answer": answer,
                    "sources": [],
                    "method": "direct"
                }
                
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {e}")
            error_message = f"Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra: {str(e)}"
            
            self._add_to_history("assistant", error_message, metadata={"method": "error"})
            
            return {
                "success": False,
                "answer": error_message,
                "sources": [],
                "method": "error"
            }
    
    def get_history(self, last_n: Optional[int] = None) -> List[Dict[str, Any]]:
        """
        L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i.
        
        Args:
            last_n: S·ªë message g·∫ßn nh·∫•t (None = t·∫•t c·∫£)
            
        Returns:
            List c√°c messages
        """
        if last_n is None:
            return self.conversation_history.copy()
        else:
            return self.conversation_history[-last_n:]
    
    def clear_history(self):
        """X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i."""
        self.conversation_history = []
        logger.info("ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i")
    
    def get_info(self) -> Dict[str, Any]:
        """L·∫•y th√¥ng tin v·ªÅ Agent."""
        return {
            "name": self.name,
            "description": self.description,
            "tools": ["rag_tool"],
            "conversation_length": len(self.conversation_history),
            "rag_tool_info": self.rag_tool.get_info()
        }


# --- INTERACTIVE MODE ---

def run_interactive():
    """Ch·∫°y agent ·ªü ch·∫ø ƒë·ªô interactive."""
    print("="*60)
    print(f"ü§ñ {AGENT_NAME}")
    print(f"   {AGENT_DESCRIPTION}")
    print("="*60)
    print("\nCommands:")
    print("  /help     - Hi·ªÉn th·ªã help")
    print("  /history  - Xem l·ªãch s·ª≠")
    print("  /clear    - X√≥a l·ªãch s·ª≠")
    print("  /info     - Th√¥ng tin agent")
    print("  /quit     - Tho√°t")
    print("\n" + "="*60 + "\n")
    
    # Kh·ªüi t·∫°o agent
    print("ƒêang kh·ªüi t·∫°o agent...")
    agent = SimpleAgent()
    print("‚úÖ Agent ƒë√£ s·∫µn s√†ng!\n")
    
    while True:
        try:
            # Nh·∫≠n input t·ª´ user
            question = input("üí¨ You: ").strip()
            
            if not question:
                continue
            
            # X·ª≠ l√Ω commands
            if question.startswith('/'):
                command = question.lower()
                
                if command == '/quit' or command == '/exit':
                    print("\nüëã T·∫°m bi·ªát!")
                    break
                
                elif command == '/help':
                    print("\nüìñ Help:")
                    print("  - ƒê·∫∑t c√¢u h·ªèi b·∫•t k·ª≥ li√™n quan ƒë·∫øn t√†i li·ªáu")
                    print("  - Agent s·∫Ω t√¨m ki·∫øm v√† tr·∫£ l·ªùi d·ª±a tr√™n th√¥ng tin trong PDF")
                    print("  - S·ª≠ d·ª•ng /commands ƒë·ªÉ xem c√°c l·ªánh kh√°c\n")
                
                elif command == '/history':
                    history = agent.get_history()
                    print(f"\nüìú L·ªãch s·ª≠ ({len(history)} messages):")
                    for msg in history[-10:]:  # Show last 10
                        role_emoji = "üí¨" if msg["role"] == "user" else "ü§ñ"
                        print(f"  {role_emoji} [{msg['timestamp']}] {msg['content'][:80]}...")
                    print()
                
                elif command == '/clear':
                    agent.clear_history()
                    print("\n‚úÖ ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i\n")
                
                elif command == '/info':
                    info = agent.get_info()
                    print(f"\nü§ñ Agent Info:")
                    print(f"  Name: {info['name']}")
                    print(f"  Description: {info['description']}")
                    print(f"  Tools: {', '.join(info['tools'])}")
                    print(f"  Conversation length: {info['conversation_length']}")
                    print(f"  RAG collection: {info['rag_tool_info']['collection']}")
                    print()
                
                else:
                    print(f"\n‚ùå Unknown command: {command}")
                    print("   Type /help for available commands\n")
                
                continue
            
            # H·ªèi agent
            print("\nü§ñ Assistant: ", end="", flush=True)
            result = agent.ask(question, verbose=False)
            print(result["answer"])
            
            # Hi·ªÉn th·ªã sources n·∫øu c√≥
            if result["sources"]:
                print(f"\nüìö Ngu·ªìn: {len(result['sources'])} t√†i li·ªáu")
                for i, source in enumerate(result["sources"][:3], 1):
                    print(f"   {i}. Trang {source['page']} (score: {source['score']:.2f})")
            
            print()  # Empty line
            
        except KeyboardInterrupt:
            print("\n\nüëã T·∫°m bi·ªát!")
            break
        except Exception as e:
            print(f"\n‚ùå L·ªói: {e}\n")


# --- MAIN ---
if __name__ == "__main__":
    run_interactive()
