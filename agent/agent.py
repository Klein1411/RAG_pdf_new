# coding: utf-8
"""
Main Agent - Agent RAG v·ªõi ki·∫øn tr√∫c Tool-based
T√≠nh nƒÉng:
- Ch·ªçn PDF v√† collection linh ho·∫°t
- Export MD h√†ng lo·∫°t (batch)
- RAG workflow v·ªõi RagTool
- Ph√°t hi·ªán √Ω ƒë·ªãnh (intent detection)
- T√¨m ki·∫øm ƒëa collection (SearchTool)
- G·ª£i √Ω topics (TopicTool)
- Export to MD (ExportTool)
"""

import sys
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime

# Th√™m project root v√†o path
project_root = Path(__file__).parent.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

from agent.config import AGENT_NAME, AGENT_DESCRIPTION, MAX_CONVERSATION_HISTORY
from agent.pdf_manager import get_pdf_manager
from agent.collection_manager import get_collection_manager
from agent.intent_classifier import get_intent_classifier
from agent.topic_suggester import get_topic_suggester
from agent.conversation_history import ConversationHistory
from agent.intent_detector import IntentDetector

# Import tools
from agent.tools.search_tool import get_search_tool
from agent.tools.topic_tool import get_topic_tool
from agent.tools.export_tool import get_export_tool
from agent.tools.rag_tool import get_rag_tool
from agent.tools.collection_tool import get_collection_tool
from agent.tools.setup_tool import get_setup_tool

# Import export function
from src.export_md import convert_to_markdown

from src.logging_config import get_logger

logger = get_logger(__name__)


class Agent:
    """Agent ch√≠nh h·ªó tr·ª£ nhi·ªÅu PDF v√† nhi·ªÅu collection"""
    
    def __init__(self, name: str = "Agent", auto_setup: bool = False):
        """
        Kh·ªüi t·∫°o Agent v·ªõi c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt
        
        Args:
            name: T√™n c·ªßa agent
            auto_setup: N·∫øu True, s·∫Ω t·ª± ƒë·ªông ch·∫°y setup() sau khi kh·ªüi t·∫°o
        """
        self.name = name
        self.pdf_manager = get_pdf_manager()  # Qu·∫£n l√Ω file PDF
        self.collection_manager = get_collection_manager()  # Qu·∫£n l√Ω collection trong Milvus
        self.intent_classifier = get_intent_classifier()  # Ph√¢n lo·∫°i c√¢u h·ªèi (PDF hay chat)
        self.topic_suggester = get_topic_suggester()  # ƒê·ªÅ xu·∫•t ch·ªß ƒë·ªÅ t·ª´ t√†i li·ªáu
        
        # Conversation and intent management
        self.conversation_history = ConversationHistory(max_messages=MAX_CONVERSATION_HISTORY)
        self.intent_detector = IntentDetector()
        
        # Initialize tools (lazy loading)
        self.search_tool = None  # SearchTool - s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o khi c·∫ßn embedding
        self.topic_tool = get_topic_tool(self.topic_suggester)  # TopicTool
        self.export_tool = get_export_tool()  # ExportTool
        self.rag_tool = None  # RagTool - s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o sau khi c√≥ LLM
        self.collection_tool = None  # CollectionTool - qu·∫£n l√Ω collections
        self.setup_tool = None  # SetupTool - x·ª≠ l√Ω setup workflow
        
        self.llm_client = None  # Client LLM (Gemini/Ollama)
        self.llm_type = None  # Lo·∫°i LLM ƒëang d√πng
        self.ollama_model = None  # T√™n model Ollama n·∫øu d√πng Ollama
        self.initialized = False  # Tr·∫°ng th√°i kh·ªüi t·∫°o
        
        self.selected_pdfs = []  # Danh s√°ch PDF ƒë√£ ch·ªçn
        self.selected_collections = []  # Danh s√°ch collection ƒë√£ ch·ªçn
        
        # Auto setup if requested
        if auto_setup:
            logger.info("üöÄ Auto setup enabled, running setup...")
            try:
                self.setup()
                if self.initialized:
                    logger.info("‚úÖ Auto setup completed successfully")
                else:
                    logger.warning("‚ö†Ô∏è  Auto setup completed but agent not initialized")
            except Exception as e:
                logger.error(f"‚ùå Auto setup failed: {e}")
                raise
    
    def _ensure_llm_initialized(self):
        """Kh·ªüi t·∫°o LLM client n·∫øu ch∆∞a c√≥"""
        if self.llm_client is None:
            logger.info("Initializing LLM client...")
            from src.llm_handler import initialize_and_select_llm
            try:
                # initialize_and_select_llm tr·∫£ v·ªÅ (model_choice, gemini_client, ollama_model_name)
                # model_choice: "1" (Gemini) ho·∫∑c "2" (Ollama)
                model_choice, gemini_client, ollama_model = initialize_and_select_llm()
                
                if model_choice == '1':
                    # Gemini
                    self.llm_client = gemini_client
                    self.llm_type = 'gemini'
                elif model_choice == '2':
                    # Ollama - c·∫ßn import client
                    from ollama import Client
                    self.llm_client = Client()
                    self.llm_type = 'ollama'
                    self.ollama_model = ollama_model
                else:
                    raise ValueError(f"Unknown model choice: {model_choice}")
                
                logger.info(f"‚úÖ LLM initialized: {self.llm_type}")
                logger.debug(f"LLM client type: {type(self.llm_client)}")
            except Exception as e:
                logger.error(f"Failed to initialize LLM: {e}")
                raise
    
    def _ensure_search_tool_initialized(self):
        """Kh·ªüi t·∫°o SearchTool v·ªõi embedding model n·∫øu ch∆∞a c√≥"""
        if self.search_tool is None:
            logger.info("Initializing SearchTool...")
            import torch
            from sentence_transformers import SentenceTransformer
            from src.config import EMBEDDING_MODEL_NAME
            
            device = 'cuda' if torch.cuda.is_available() else 'cpu'
            embedding_model = SentenceTransformer(EMBEDDING_MODEL_NAME).to(device)
            self.search_tool = get_search_tool(embedding_model)
            logger.info(f"‚úÖ SearchTool initialized on {device}")
    
    def _ensure_rag_tool_initialized(self):
        """Kh·ªüi t·∫°o RagTool n·∫øu ch∆∞a c√≥"""
        if self.rag_tool is None:
            logger.info("Initializing RagTool...")
            
            # Ensure dependencies
            self._ensure_llm_initialized()
            self._ensure_search_tool_initialized()
            
            # Create RagTool
            self.rag_tool = get_rag_tool(
                search_tool=self.search_tool,
                llm_client=self.llm_client,
                llm_type=self.llm_type,
                ollama_model=self.ollama_model
            )
            logger.info("‚úÖ RagTool initialized")
    
    def _ensure_collection_tool_initialized(self):
        """Kh·ªüi t·∫°o CollectionTool n·∫øu ch∆∞a c√≥"""
        if self.collection_tool is None:
            logger.info("Initializing CollectionTool...")
            self.collection_tool = get_collection_tool(self.collection_manager)
            logger.info("‚úÖ CollectionTool initialized")
    
    def _ensure_setup_tool_initialized(self):
        """Kh·ªüi t·∫°o SetupTool n·∫øu ch∆∞a c√≥"""
        if self.setup_tool is None:
            logger.info("Initializing SetupTool...")
            
            # Ensure CollectionTool
            self._ensure_collection_tool_initialized()
            
            # Create SetupTool
            self.setup_tool = get_setup_tool(
                pdf_manager=self.pdf_manager,
                collection_manager=self.collection_manager,
                collection_tool=self.collection_tool,
                export_tool=self.export_tool,
                topic_tool=self.topic_tool
            )
            logger.info("‚úÖ SetupTool initialized")
    
    def setup(self):
        """Setup agent using SetupTool - delegate to tool"""
        if self.initialized:
            choice = input("\nAgent already setup. Re-run? (y/N): ").strip().lower()
            if choice not in ['y', 'yes']:
                return
            self.initialized = False
        
        # Delegate to SetupTool
        self._ensure_setup_tool_initialized()
        result = self.setup_tool.setup_workflow(re_setup=True)
        
        if result['success']:
            self.selected_pdfs = result['selected_pdfs']
            self.selected_collections = result['selected_collections']
            self.initialized = True
            
            # Initialize LLM for RAG
            print("\nSTEP 4: Initialize RAG")
            self._ensure_llm_initialized()
            
            print("\nL·ªánh: collections | history | clear | setup | exit | topics")
            print("üí° G√µ 'topics' ho·∫∑c 'suggest' ƒë·ªÉ xem g·ª£i √Ω ch·ªß ƒë·ªÅ")
        else:
            print(f"\n‚ö†Ô∏è  Setup failed: {result['message']}")
    
    def manage_collections(self):
        """Manage collections using CollectionTool - interactive menu"""
        self._ensure_collection_tool_initialized()
        
        while True:
            print("\n" + "="*60)
            print("QU·∫¢N L√ù COLLECTION")
            print("="*60)
            
            # Get all collections
            all_collections = self.collection_tool.list_collections()
            
            # Display available collections
            print(f"\nC√≥ s·∫µn ({len(all_collections)}):")
            for i, col in enumerate(all_collections, 1):
                status = "‚úì ƒêANG D√ôNG" if col['name'] in self.selected_collections else "  "
                print(f"{i}. [{status}] {col['name']} ({col['num_entities']} docs)")
            
            # Display active collections
            print(f"\nƒêang d√πng ({len(self.selected_collections)}):")
            for col_name in self.selected_collections:
                print(f"   - {col_name}")
            
            # Menu
            print("\nL·ªánh:")
            print("  1-9     - Toggle collection")
            print("  all     - Ch·ªçn t·∫•t c·∫£")
            print("  none    - B·ªè ch·ªçn t·∫•t c·∫£")
            print("  back    - Quay l·∫°i")
            
            choice = input("\nCh·ªçn: ").strip().lower()
            
            if choice == 'back':
                break
            elif choice == 'all':
                self.selected_collections = [col['name'] for col in all_collections]
                print(f"‚úÖ ƒê√£ ch·ªçn t·∫•t c·∫£ ({len(self.selected_collections)} collections)")
            elif choice == 'none':
                self.selected_collections = []
                print("‚úÖ ƒê√£ b·ªè ch·ªçn t·∫•t c·∫£")
            elif choice.isdigit():
                # Toggle collection
                idx = int(choice) - 1
                if 0 <= idx < len(all_collections):
                    col_name = all_collections[idx]['name']
                    if col_name in self.selected_collections:
                        self.selected_collections.remove(col_name)
                        print(f"‚ûñ ƒê√£ b·ªè: {col_name}")
                    else:
                        self.selected_collections.append(col_name)
                        print(f"‚ûï ƒê√£ th√™m: {col_name}")
                else:
                    print("‚ùå S·ªë kh√¥ng h·ª£p l·ªá")
            else:
                print("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá")
    
    def process_message(self, message: str) -> str:
        """X·ª≠ l√Ω tin nh·∫Øn t·ª´ user: ph√°t hi·ªán intent -> tr·∫£ l·ªùi"""
        logger.info(f"User: {message}")
        
        # Add to conversation history (using ConversationHistory)
        self.conversation_history.add_message('user', message)
        
        # Classify: PDF-related or general chat
        pdf_classification = self.intent_classifier.classify(message)
        print(f"\nüîç Ph√¢n lo·∫°i: {pdf_classification['intent']} (tin c·∫≠y: {pdf_classification['confidence']:.2f})")
        print(f"   L√Ω do: {pdf_classification['reason']}")
        
        # Detect detailed intent (using IntentDetector)
        intent_result = self.intent_detector.detect(message)
        intent = intent_result['intent']
        confidence = intent_result['confidence']
        print(f"   √ù ƒë·ªãnh chi ti·∫øt: {intent} (ƒë·ªô tin c·∫≠y: {confidence:.2f})")
        
        # Route to appropriate handler
        if intent == 'greeting':
            response = self._handle_greeting()
        elif intent == 'farewell':
            response = self._handle_farewell()
        elif intent == 'thanks':
            response = self._handle_thanks()
        elif intent == 'help':
            response = self._handle_help()
        elif intent == 'command_export':
            response = self._handle_export_command()
        elif intent == 'command_check':
            response = self._handle_check_command()
        elif intent == 'no_idea':
            print("   ‚Üí ƒê·ªÅ xu·∫•t c√°c ch·ªß ƒë·ªÅ t·ª´ t√†i li·ªáu")
            response = self.handle_no_idea_question()
        elif intent == 'question':
            if pdf_classification['intent'] == 'pdf_related':
                print("   ‚Üí S·ª≠ d·ª•ng RAG ƒë·ªÉ tr·∫£ l·ªùi t·ª´ t√†i li·ªáu")
                response = self._handle_question(message)
            else:
                print("   ‚Üí Chat b√¨nh th∆∞·ªùng kh√¥ng c·∫ßn t√¨m ki·∫øm t√†i li·ªáu")
                response = self._handle_general_chat(message)
        else:
            response = "T√¥i kh√¥ng hi·ªÉu. Vui l√≤ng di·ªÖn ƒë·∫°t l·∫°i."
        
        # Add response to conversation history
        self.conversation_history.add_message('assistant', response)
        
        return response
    
    def _handle_greeting(self) -> str:
        return f"Hello! I'm {self.name}. I can help you search information from PDF documents. What would you like to know?"
    
    def _handle_farewell(self) -> str:
        return "Goodbye! See you again!"
    
    def _handle_thanks(self) -> str:
        return "You're welcome! Happy to help."
    
    def _handle_help(self) -> str:
        return """I can help you:

1. Search information: Ask any question about the documents
2. Manage collections: Type 'collections' to add/remove collections
3. View history: Type 'history' to see conversation
4. Re-setup: Type 'setup' to select different PDFs/collections
5. Export MD: Ask me to export PDFs to Markdown
6. Check collection: Ask me to check collection status

Example questions:
- "What is ROUGE?"
- "Explain BLEU metric"
- "Export MD files"
- "Check collection status"

Try asking me something!"""
    
    def _handle_export_command(self) -> str:
        """X·ª≠ l√Ω l·ªánh export PDF sang MD (s·ª≠ d·ª•ng ExportTool)"""
        if not self.selected_pdfs:
            return "Ch∆∞a ch·ªçn PDF n√†o. Vui l√≤ng ch·∫°y setup tr∆∞·ªõc."
        
        try:
            print(f"\nƒêang export {len(self.selected_pdfs)} PDF sang MD...")
            
            # L·∫•y danh s√°ch t√™n file PDF
            pdf_names = [pdf.name for pdf in self.selected_pdfs]
            
            # S·ª≠ d·ª•ng ExportTool
            results = self.export_tool.export_multiple_pdfs(pdf_names, output_dir="exports")
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
            for result in results['results']:
                status = "‚úÖ" if result['status'] else "‚ùå"
                print(f"{status} {result['pdf_name']}")
            
            # T·∫°o summary message
            summary = self.export_tool.get_export_summary(results)
            return summary
            
        except Exception as e:
            logger.error(f"Export command failed: {e}", exc_info=True)
            return f"Error during export: {str(e)}"
    
    def _handle_check_command(self) -> str:
        """Ki·ªÉm tra tr·∫°ng th√°i c√°c collection"""
        if not self.selected_collections:
            return "Ch∆∞a ch·ªçn collection n√†o. Vui l√≤ng ch·∫°y setup tr∆∞·ªõc."
        
        try:
            from pymilvus import Collection
            
            status_info = []
            total_docs = 0
            
            for col_name in self.selected_collections:
                try:
                    collection = Collection(col_name)
                    collection.load()
                    num_entities = collection.num_entities
                    total_docs += num_entities
                    status_info.append(f"- {col_name}: {num_entities} t√†i li·ªáu")
                except Exception as e:
                    status_info.append(f"- {col_name}: L·ªói - {str(e)}")
            
            response = f"Tr·∫°ng th√°i Collection ({len(self.selected_collections)} collections):\n"
            response += "\n".join(status_info)
            response += f"\n\nT·ªïng s·ªë t√†i li·ªáu: {total_docs}"
            
            return response
        except Exception as e:
            logger.error(f"Check command failed: {e}", exc_info=True)
            return f"Error checking collections: {str(e)}"
    
    def _handle_general_chat(self, message: str) -> str:
        """
        X·ª≠ l√Ω chat b√¨nh th∆∞·ªùng kh√¥ng li√™n quan ƒë·∫øn PDF
        S·ª≠ d·ª•ng LLM ƒë·ªÉ tr·∫£ l·ªùi t·ª± nhi√™n m√† kh√¥ng c·∫ßn t√¨m ki·∫øm t√†i li·ªáu
        """
        self._ensure_llm_initialized()
        
        try:
            # Get recent context from conversation history
            recent_history = self.conversation_history.get_recent(n=3)
            
            # Format context for LLM
            context = ""
            if recent_history:
                for msg in recent_history:
                    role = "User" if msg['role'] == 'user' else "Assistant"
                    context += f"{role}: {msg['content']}\n"
            
            # Prompt for general chat
            prompt = f"""B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán. H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch t·ª± nhi√™n v√† h·ªØu √≠ch.

{context}

User: {message}

H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, t·ª± nhi√™n v√† th√¢n thi·ªán."""

            # Call LLM
            if self.llm_type == 'gemini':
                answer = self.llm_client.generate_content(prompt).strip()
            else:  # ollama
                response = self.llm_client.chat(
                    model=self.ollama_model,
                    messages=[{'role': 'user', 'content': prompt}]
                )
                answer = response['message']['content'].strip()
            
            return answer
        
        except Exception as e:
            logger.error(f"L·ªói khi chat: {e}", exc_info=True)
            return "Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n."
    
    def _handle_question(self, question: str) -> str:
        """Handle question using RagTool - delegate to tool"""
        if not self.initialized:
            return "Agent ch∆∞a setup. Ch·∫°y setup() tr∆∞·ªõc."
        if not self.selected_collections:
            return "Ch∆∞a ch·ªçn collection n√†o."
        
        # Ensure RagTool is initialized
        self._ensure_rag_tool_initialized()
        
        try:
            print(f"\nƒêang t√¨m trong {len(self.selected_collections)} collection...")
            
            # Delegate to RagTool
            result = self.rag_tool.answer_question(
                question=question,
                collection_names=self.selected_collections,
                conversation_history=self.conversation_history.get_all(),
                top_k=20
            )
            
            if not result['success'] or not result['sources']:
                return self._show_no_results_with_suggestions()
            
            # Format response with sources
            answer = result['answer']
            sources = result['sources']
            
            response = f"{answer}\n\n**Ngu·ªìn ({len(sources)} t√†i li·ªáu):**"
            
            from collections import defaultdict
            sources_by_pdf = defaultdict(list)
            for source in sources[:15]:  # Show top 15 sources
                pdf_name = source.get('source', 'Unknown')
                page = source.get('page', 'N/A')
                score = source.get('score', 0)
                sources_by_pdf[pdf_name].append((page, score))
            
            for i, (pdf_name, pages_info) in enumerate(sources_by_pdf.items(), 1):
                response += f"\n  {i}. {pdf_name}"
                for page, score in pages_info[:3]:  # Top 3 pages per PDF
                    response += f"\n     - Trang {page}"
            
            return response
            
        except Exception as e:
            logger.error(f"L·ªói: {e}", exc_info=True)
            return f"L·ªói: {str(e)}"
    
    def _show_no_results_with_suggestions(self) -> str:
        """Hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng t√¨m th·∫•y k√®m g·ª£i √Ω"""
        no_result_msg = "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong t√†i li·ªáu.\n"
        
        # Ki·ªÉm tra xem c√≥ topics kh√¥ng
        if self.topic_suggester.has_topics():
            no_result_msg += "\nüí° B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ c√°c ch·ªß ƒë·ªÅ sau:\n"
            suggestions = self.topic_suggester.get_suggestions(
                self.selected_collections,
                max_suggestions=5
            )
            for i, suggestion in enumerate(suggestions, 1):
                no_result_msg += f"   {i}. {suggestion}\n"
            no_result_msg += "\nüìù Ho·∫∑c g√µ 'topics' ƒë·ªÉ xem t·∫•t c·∫£ ch·ªß ƒë·ªÅ c√≥ s·∫µn"
        else:
            no_result_msg += "üí° Th·ª≠ di·ªÖn ƒë·∫°t l·∫°i c√¢u h·ªèi ho·∫∑c g√µ 'topics' ƒë·ªÉ xem g·ª£i √Ω"
        
        return no_result_msg
    
    def get_history(self, last_n: Optional[int] = None) -> List[Dict[str, Any]]:
        """L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i (t·∫•t c·∫£ ho·∫∑c n cu·ªëi c√πng)"""
        if last_n is None:
            return self.conversation_history.get_all()
        return self.conversation_history.get_recent(n=last_n)
    
    def clear_history(self):
        """X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i v√† topics cache"""
        self.conversation_history.clear()
        self.topic_suggester.clear_cache()
        logger.info("ƒê√£ x√≥a l·ªãch s·ª≠ v√† topics cache")
    
    def show_topics(self) -> str:
        """Hi·ªÉn th·ªã c√°c ch·ªß ƒë·ªÅ c√≥ s·∫µn t·ª´ t√†i li·ªáu (s·ª≠ d·ª•ng TopicTool)"""
        if not self.topic_tool.has_topics():
            return "‚ö†Ô∏è  Ch∆∞a c√≥ topics. Vui l√≤ng ch·∫°y setup tr∆∞·ªõc."
        
        # Hi·ªÉn th·ªã topic summary
        summary = self.topic_tool.get_topic_summary()
        
        # Th√™m suggestions
        suggestions = self.topic_tool.get_suggestions(
            max_suggestions=8,
            collection_names=self.selected_collections
        )
        
        formatted_suggestions = self.topic_tool.format_suggestions(suggestions)
        
        return summary + "\n\n" + formatted_suggestions
    
    def handle_no_idea_question(self) -> str:
        """
        X·ª≠ l√Ω khi user n√≥i 't√¥i kh√¥ng bi·∫øt h·ªèi g√¨' ho·∫∑c 'ƒë·ªÅ xu·∫•t ch·ªß ƒë·ªÅ'
        S·ª≠ d·ª•ng TopicTool
        """
        if not self.topic_tool.has_topics():
            return ("Ch∆∞a c√≥ th√¥ng tin v·ªÅ c√°c ch·ªß ƒë·ªÅ trong t√†i li·ªáu. "
                   "Vui l√≤ng ch·∫°y setup ƒë·ªÉ ph√¢n t√≠ch t√†i li·ªáu.")
        
        # L·∫•y suggestions
        suggestions = self.topic_tool.get_suggestions(
            max_suggestions=10,
            collection_names=self.selected_collections
        )
        
        formatted = self.topic_tool.format_suggestions(suggestions)
        formatted += "\n\nüí¨ Ho·∫∑c g√µ 'topics' ƒë·ªÉ xem t·∫•t c·∫£ ch·ªß ƒë·ªÅ c√≥ s·∫µn"
        
        return formatted


def run_cli():
    """Ch·∫°y Agent ·ªü ch·∫ø ƒë·ªô CLI"""
    print("\n" + "="*70)
    print(AGENT_NAME)
    print(AGENT_DESCRIPTION)
    print("="*70)
    
    try:
        agent = Agent()
        agent.setup()
        
        if not agent.initialized:
            print("Thi·∫øt l·∫≠p th·∫•t b·∫°i")
            return
        
        print("\nB·∫Øt ƒë·∫ßu chat (g√µ exit/quit/bye ƒë·ªÉ tho√°t)")
        print("-"*70)
        
        while True:
            try:
                user_input = input("\nB·∫°n: ").strip()
                if not user_input:
                    continue
                
                # X·ª≠ l√Ω c√°c l·ªánh ƒë·∫∑c bi·ªát
                if user_input.lower() in ['exit', 'quit', 'bye']:
                    print("T·∫°m bi·ªát!")
                    break
                elif user_input.lower() == 'history':
                    # Xem l·ªãch s·ª≠ h·ªôi tho·∫°i
                    for entry in agent.get_history(last_n=5):
                        role = "B·∫°n" if entry['role'] == 'user' else "Agent"
                        print(f"\n{role}: {entry['content'][:200]}")
                    continue
                elif user_input.lower() == 'clear':
                    # X√≥a l·ªãch s·ª≠
                    agent.clear_history()
                    print("ƒê√£ x√≥a l·ªãch s·ª≠")
                    continue
                elif user_input.lower() == 'setup':
                    # Thi·∫øt l·∫≠p l·∫°i
                    agent.setup()
                    continue
                elif user_input.lower() in ['collections', 'col']:
                    # Qu·∫£n l√Ω collection
                    agent.manage_collections()
                    continue
                elif user_input.lower() in ['topics', 'topic', 'suggest', 'g·ª£i √Ω']:
                    # Xem c√°c ch·ªß ƒë·ªÅ c√≥ s·∫µn
                    topics_info = agent.show_topics()
                    print(f"\n{topics_info}")
                    continue
                
                # Ki·ªÉm tra n·∫øu user kh√¥ng bi·∫øt h·ªèi g√¨
                no_idea_keywords = [
                    'kh√¥ng bi·∫øt h·ªèi g√¨', 'kh√¥ng bi·∫øt h·ªèi', 'ƒë·ªÅ xu·∫•t', 'g·ª£i √Ω',
                    't√¥i n√™n h·ªèi g√¨', 'c√≥ th·ªÉ h·ªèi g√¨', 'ch·ªß ƒë·ªÅ n√†o',
                    "don't know what to ask", 'suggest topics', 'what can i ask'
                ]
                
                if any(keyword in user_input.lower() for keyword in no_idea_keywords):
                    response = agent.handle_no_idea_question()
                    print(f"\nAgent: {response}")
                    continue
                
                # X·ª≠ l√Ω tin nh·∫Øn th√¥ng th∆∞·ªùng
                response = agent.process_message(user_input)
                print(f"\nAgent: {response}")
                
            except KeyboardInterrupt:
                print("\nT·∫°m bi·ªát!")
                break
            except Exception as e:
                print(f"L·ªói: {e}")
                logger.error(f"L·ªói: {e}", exc_info=True)
    
    except Exception as e:
        print(f"Cannot initialize: {e}")
        logger.error(f"Init failed: {e}", exc_info=True)


if __name__ == "__main__":
    run_cli()
